export class Value {
    static getDistinctItems(items) {
        const newArray = [];
        items.forEach((item) => {
            if (newArray.indexOf(item) === -1) {
                newArray.push(item);
            }
        });
        return newArray;
    }
    static splitStringBySeperator(text, seperator = ',') {
        if (Value.isNullOrWhiteSpace(text)) {
            return [];
        }
        let strs = text.split(seperator);
        strs = strs.map((str) => str.trim());
        return strs.filter((str) => Value.isNotNullOrWhiteSpace(str));
    }
    static extractValueSplitBySeparator(value, separator, index) {
        return value.indexOf(separator) > -1 ? value.split('_')[index] : '';
    }
    static isNumber(value) {
        if (Value.isNotNullOrUndefined(value) && /^\d+(\.\d+)?$/.test(value.toString())) {
            return true;
        }
        return false;
    }
    static isNumberWithPattern(value, pattern) {
        if (Value.isNotNullOrUndefined(value) && pattern.test(value.toString())) {
            return true;
        }
        return false;
    }
    static clearArray(value) {
        if (Value.isArray(value)) {
            value.splice(0, value.length);
        }
    }
    static isArray(value) {
        if (Value.isNotNullOrUndefined(value) && value instanceof Array) {
            return true;
        }
        return false;
    }
    static isString(value) {
        if (typeof value === 'string') {
            return true;
        }
        return false;
    }
    static isArrayWithItems(value) {
        if (Value.isArray(value) && value.length > 0) {
            return true;
        }
        return false;
    }
    static isNullOrUndefined(value) {
        return !Value.isNotNullOrUndefined(value);
    }
    static isNotNullOrUndefined(value) {
        if (value !== undefined && value !== null) {
            return true;
        }
        return false;
    }
    static isNotNullOrWhiteSpace(value) {
        if (Value.isNotNullOrUndefined(value) && value.trim() !== '') {
            return true;
        }
        return false;
    }
    static isNullOrWhiteSpace(value) {
        return !Value.isNotNullOrWhiteSpace(value);
    }
    static isStringContains(source, toBeMatched, caseSensitive = true) {
        if (!source || !toBeMatched) {
            return false;
        }
        if (caseSensitive) {
            if (source.indexOf(toBeMatched) !== -1) {
                return true;
            }
            return false;
        }
        else {
            if (source.toLocaleLowerCase().indexOf(toBeMatched.toLocaleLowerCase()) !== -1) {
                return true;
            }
            return false;
        }
    }
    static isArrayContains(sourceList, toBeMatched, caseSensitive = true) {
        if (!sourceList || !toBeMatched) {
            return false;
        }
        for (const source of sourceList) {
            if (caseSensitive) {
                if (source.indexOf(toBeMatched) !== -1) {
                    return true;
                }
            }
            else {
                if (source.toLocaleLowerCase().indexOf(toBeMatched.toLocaleLowerCase()) !== -1) {
                    return true;
                }
            }
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,