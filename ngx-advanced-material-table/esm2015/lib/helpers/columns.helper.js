import { ColumnType } from '../interfaces/column-definition.interface';
export class ColumnHelper {
    static getContent(field, element) {
        if (field.indexOf('.') === -1) {
            return element[field];
        }
        // Activate the way to get text from  Class.Element.XX.XX.XX
        const fieldNames = field.split('.');
        let returnValue = element[fieldNames[0]];
        for (let index = 1; index < fieldNames.length; index++) {
            returnValue = returnValue[fieldNames[index]];
        }
        return returnValue !== null && returnValue !== void 0 ? returnValue : '';
    }
    static getToolTip(column, element) {
        if (!element || !column || !element[column.Field]) {
            return '';
        }
        let val;
        switch (column.ColumnType) {
            case ColumnType.Date:
            case ColumnType.DateTime:
            case ColumnType.Time:
            case ColumnType.Icon:
            case ColumnType.DropDown:
            case ColumnType.String:
            case ColumnType.Link:
            case ColumnType.Image:
                val = element[column.Field];
                break;
            default:
                val = '';
                break;
        }
        return val;
    }
    static isImmutableColumn(column) {
        // Columns types that cannot be hidden, moved or filtered
        return column.ColumnType === ColumnType.Actions || column.ColumnType === ColumnType.Icon;
    }
    static canColumnBeHidden(column) {
        return !this.isImmutableColumn(column);
    }
    static canColumnBeMoved(column) {
        return !this.isImmutableColumn(column);
    }
    static canColumnBeFiltered(column) {
        return !this.isImmutableColumn(column);
    }
    static isFilteringEnabledOnColumn(column) {
        if (!this.canColumnBeFiltered(column)) {
            return false;
        }
        if (!column.Title) {
            return false;
        }
        return true;
    }
    static hasFiltersOrSortingEnabled(column) {
        if (!column) {
            return false;
        }
        if (column.SortDirection) {
            return true;
        }
        if (column.FilterValues && column.FilterValues.length > 0) {
            return true;
        }
        return false;
    }
    static isCellClickable(column) {
        switch (column.ColumnType) {
            case ColumnType.Actions:
            case ColumnType.Icon:
            case ColumnType.DropDown:
            case ColumnType.NumberInput:
            case ColumnType.DropDownDynamic:
                return false;
            default:
                return true;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1ucy5oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtYWR2YW5jZWQtbWF0ZXJpYWwtdGFibGUvc3JjL2xpYi9oZWxwZXJzL2NvbHVtbnMuaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQXFCLE1BQU0sMkNBQTJDLENBQUM7QUFFMUYsTUFBTSxPQUFPLFlBQVk7SUFDckIsTUFBTSxDQUFDLFVBQVUsQ0FBSSxLQUFhLEVBQUUsT0FBVTtRQUMxQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDM0IsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7UUFFRCw0REFBNEQ7UUFDNUQsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVwQyxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDcEQsV0FBVyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNoRDtRQUVELE9BQU8sV0FBVyxhQUFYLFdBQVcsY0FBWCxXQUFXLEdBQUksRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFJLE1BQXlCLEVBQUUsT0FBVTtRQUN0RCxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMvQyxPQUFPLEVBQUUsQ0FBQztTQUNiO1FBRUQsSUFBSSxHQUFXLENBQUM7UUFDaEIsUUFBUSxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ3ZCLEtBQUssVUFBVSxDQUFDLElBQUksQ0FBQztZQUNyQixLQUFLLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDekIsS0FBSyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQ3JCLEtBQUssVUFBVSxDQUFDLElBQUksQ0FBQztZQUNyQixLQUFLLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDekIsS0FBSyxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQ3ZCLEtBQUssVUFBVSxDQUFDLElBQUksQ0FBQztZQUNyQixLQUFLLFVBQVUsQ0FBQyxLQUFLO2dCQUNqQixHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDNUIsTUFBTTtZQUVWO2dCQUNJLEdBQUcsR0FBRyxFQUFFLENBQUM7Z0JBQ1QsTUFBTTtTQUNiO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLE1BQXlCO1FBQzlDLHlEQUF5RDtRQUN6RCxPQUFPLE1BQU0sQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxJQUFJLENBQUM7SUFDN0YsQ0FBQztJQUVELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxNQUF5QjtRQUM5QyxPQUFPLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBeUI7UUFDN0MsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQXlCO1FBQ2hELE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxNQUF5QjtRQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ25DLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDZixPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNLENBQUMsMEJBQTBCLENBQUMsTUFBeUI7UUFDdkQsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxNQUFNLENBQUMsYUFBYSxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxJQUFJLE1BQU0sQ0FBQyxZQUFZLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUF5QjtRQUM1QyxRQUFRLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDdkIsS0FBSyxVQUFVLENBQUMsT0FBTyxDQUFDO1lBQ3hCLEtBQUssVUFBVSxDQUFDLElBQUksQ0FBQztZQUNyQixLQUFLLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDekIsS0FBSyxVQUFVLENBQUMsV0FBVyxDQUFDO1lBQzVCLEtBQUssVUFBVSxDQUFDLGVBQWU7Z0JBQzNCLE9BQU8sS0FBSyxDQUFDO1lBQ2pCO2dCQUNJLE9BQU8sSUFBSSxDQUFDO1NBQ25CO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sdW1uVHlwZSwgSUNvbHVtbkRlZmluaXRpb24gfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvbHVtbi1kZWZpbml0aW9uLmludGVyZmFjZSc7XG5cbmV4cG9ydCBjbGFzcyBDb2x1bW5IZWxwZXIge1xuICAgIHN0YXRpYyBnZXRDb250ZW50PFQ+KGZpZWxkOiBzdHJpbmcsIGVsZW1lbnQ6IFQpOiBzdHJpbmcge1xuICAgICAgICBpZiAoZmllbGQuaW5kZXhPZignLicpID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRbZmllbGRdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWN0aXZhdGUgdGhlIHdheSB0byBnZXQgdGV4dCBmcm9tICBDbGFzcy5FbGVtZW50LlhYLlhYLlhYXG4gICAgICAgIGNvbnN0IGZpZWxkTmFtZXMgPSBmaWVsZC5zcGxpdCgnLicpO1xuXG4gICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IGVsZW1lbnRbZmllbGROYW1lc1swXV07XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCBmaWVsZE5hbWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSByZXR1cm5WYWx1ZVtmaWVsZE5hbWVzW2luZGV4XV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWUgPz8gJyc7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFRvb2xUaXA8VD4oY29sdW1uOiBJQ29sdW1uRGVmaW5pdGlvbiwgZWxlbWVudDogVCkge1xuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIWNvbHVtbiB8fCAhZWxlbWVudFtjb2x1bW4uRmllbGRdKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdmFsOiBzdHJpbmc7XG4gICAgICAgIHN3aXRjaCAoY29sdW1uLkNvbHVtblR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQ29sdW1uVHlwZS5EYXRlOlxuICAgICAgICAgICAgY2FzZSBDb2x1bW5UeXBlLkRhdGVUaW1lOlxuICAgICAgICAgICAgY2FzZSBDb2x1bW5UeXBlLlRpbWU6XG4gICAgICAgICAgICBjYXNlIENvbHVtblR5cGUuSWNvbjpcbiAgICAgICAgICAgIGNhc2UgQ29sdW1uVHlwZS5Ecm9wRG93bjpcbiAgICAgICAgICAgIGNhc2UgQ29sdW1uVHlwZS5TdHJpbmc6XG4gICAgICAgICAgICBjYXNlIENvbHVtblR5cGUuTGluazpcbiAgICAgICAgICAgIGNhc2UgQ29sdW1uVHlwZS5JbWFnZTpcbiAgICAgICAgICAgICAgICB2YWwgPSBlbGVtZW50W2NvbHVtbi5GaWVsZF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdmFsID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNJbW11dGFibGVDb2x1bW4oY29sdW1uOiBJQ29sdW1uRGVmaW5pdGlvbik6IGJvb2xlYW4ge1xuICAgICAgICAvLyBDb2x1bW5zIHR5cGVzIHRoYXQgY2Fubm90IGJlIGhpZGRlbiwgbW92ZWQgb3IgZmlsdGVyZWRcbiAgICAgICAgcmV0dXJuIGNvbHVtbi5Db2x1bW5UeXBlID09PSBDb2x1bW5UeXBlLkFjdGlvbnMgfHwgY29sdW1uLkNvbHVtblR5cGUgPT09IENvbHVtblR5cGUuSWNvbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgY2FuQ29sdW1uQmVIaWRkZW4oY29sdW1uOiBJQ29sdW1uRGVmaW5pdGlvbik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNJbW11dGFibGVDb2x1bW4oY29sdW1uKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY2FuQ29sdW1uQmVNb3ZlZChjb2x1bW46IElDb2x1bW5EZWZpbml0aW9uKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pc0ltbXV0YWJsZUNvbHVtbihjb2x1bW4pO1xuICAgIH1cblxuICAgIHN0YXRpYyBjYW5Db2x1bW5CZUZpbHRlcmVkKGNvbHVtbjogSUNvbHVtbkRlZmluaXRpb24pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzSW1tdXRhYmxlQ29sdW1uKGNvbHVtbik7XG4gICAgfVxuXG4gICAgc3RhdGljIGlzRmlsdGVyaW5nRW5hYmxlZE9uQ29sdW1uKGNvbHVtbjogSUNvbHVtbkRlZmluaXRpb24pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbkNvbHVtbkJlRmlsdGVyZWQoY29sdW1uKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb2x1bW4uVGl0bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHN0YXRpYyBoYXNGaWx0ZXJzT3JTb3J0aW5nRW5hYmxlZChjb2x1bW46IElDb2x1bW5EZWZpbml0aW9uKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghY29sdW1uKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sdW1uLlNvcnREaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbHVtbi5GaWx0ZXJWYWx1ZXMgJiYgY29sdW1uLkZpbHRlclZhbHVlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNDZWxsQ2xpY2thYmxlKGNvbHVtbjogSUNvbHVtbkRlZmluaXRpb24pOiBib29sZWFuIHtcbiAgICAgICAgc3dpdGNoIChjb2x1bW4uQ29sdW1uVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBDb2x1bW5UeXBlLkFjdGlvbnM6XG4gICAgICAgICAgICBjYXNlIENvbHVtblR5cGUuSWNvbjpcbiAgICAgICAgICAgIGNhc2UgQ29sdW1uVHlwZS5Ecm9wRG93bjpcbiAgICAgICAgICAgIGNhc2UgQ29sdW1uVHlwZS5OdW1iZXJJbnB1dDpcbiAgICAgICAgICAgIGNhc2UgQ29sdW1uVHlwZS5Ecm9wRG93bkR5bmFtaWM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==