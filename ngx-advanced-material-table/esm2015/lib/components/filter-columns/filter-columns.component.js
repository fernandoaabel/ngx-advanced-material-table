import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { ColumnType, } from '../../interfaces/column-definition.interface';
import { Value } from '../../helpers/values.helper';
import { DialogActionType } from '../../interfaces/enums/dialog-action.enum';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/form-field";
import * as i6 from "@angular/cdk/scrolling";
import * as i7 from "@angular/material/checkbox";
import * as i8 from "@angular/material/button-toggle";
import * as i9 from "@angular/material/input";
import * as i10 from "@angular/common";
import * as i11 from "../../pipes/filter.pipe";
export class FilterColumnsComponent {
    constructor(dialogRef, fb, context) {
        this.dialogRef = dialogRef;
        this.fb = fb;
        this.context = context;
        this.searchFiltersValue = '';
        this.distinctColumnValues = [];
        this.cancelResponse = { action: DialogActionType.Cancel };
        this.columnType = ColumnType;
        this.selectedColumn = this.context.selectedColumn;
        this.distinctColumnValues = this.sortColumns(this.context.distinctData);
        this.initialSortingDirection = this.selectedColumn.SortDirection;
        this.filterForm = this.fb.group({
            SearchFilters: [''],
        });
    }
    ngOnInit() {
        this.filterForm.controls.SearchFilters.valueChanges.subscribe(() => this.onSearchFiltersValueChanged());
    }
    onSearchFiltersValueChanged() {
        this.searchFiltersValue = this.filterForm.controls.SearchFilters.value;
    }
    onSelectFilter(change) {
        this.distinctColumnValues.forEach((x) => {
            if (x.name === change.source.value) {
                x.checked = change.checked;
            }
        });
    }
    onSortingValueChange(value) {
        if (this.selectedColumn.SortDirection === value) {
            this.selectedColumn.SortDirection = undefined;
        }
        else {
            this.selectedColumn.SortDirection = value;
        }
    }
    onApplyFiltersButton() {
        this.selectedColumn.FilterValues = [];
        this.selectedColumn.FilterValues = this.distinctColumnValues.filter((x) => x.checked === true).map((x) => x.name);
        const response = {
            action: DialogActionType.Ok,
            sortingHasChanged: this.initialSortingDirection !== this.selectedColumn.SortDirection,
            selectedColumn: this.selectedColumn,
        };
        this.dialogRef.close(response);
    }
    sortColumns(columns) {
        if (columns.length === 0) {
            return [];
        }
        if (columns[0].name instanceof Date) {
            columns.sort((a, b) => (a.name > b.name ? 1 : -1));
        }
        else if (Value.isNumber(columns[0].name)) {
            columns.sort((a, b) => a.name - b.name);
        }
        else if (Value.isString(columns[0].name)) {
            columns.sort((a, b) => a.name.localeCompare(b.name));
        }
        return columns;
    }
}
FilterColumnsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.12", ngImport: i0, type: FilterColumnsComponent, deps: [{ token: i1.MatDialogRef }, { token: i2.FormBuilder }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
FilterColumnsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.12", type: FilterColumnsComponent, selector: "filter-columns", ngImport: i0, template: "<div class=\"filter-columns\">\n    <button mat-icon-button class=\"close-icon\" [mat-dialog-close]=\"cancelResponse\">\n        <mat-icon>close</mat-icon>\n    </button>\n\n    <h3 mat-dialog-title i18n=\"@@filter-columns-label-filterRowsHeading\">Filter rows</h3>\n\n    <mat-dialog-content>\n        <form id=\"formFilterRoutesPlanning\" role=\"form\" [formGroup]=\"filterForm\">\n            <mat-form-field>\n                <mat-label i18n=\"@@formControl-label-filterGrid\">Search filters</mat-label>\n                <input matInput type=\"text\" formControlName=\"SearchFilters\" id=\"FilterString\" />\n            </mat-form-field>\n        </form>\n\n        <cdk-virtual-scroll-viewport itemSize=\"15\" class=\"filter-column-viewport\">\n            <span *ngIf=\"distinctColumnValues.length === 0\" i18n=\"@@routeplanning-filter-column-no-values\">No available values</span>\n\n            <div\n                class=\"filter-column-item\"\n                *cdkVirtualFor=\"let value of distinctColumnValues | filterCriteria: searchFiltersValue; let i = index\"\n            >\n                <mat-checkbox [value]=\"value.name\" [checked]=\"value.checked\" (change)=\"onSelectFilter($event)\">\n                    <span> {{ value.displayedName }}</span>\n                </mat-checkbox>\n            </div>\n        </cdk-virtual-scroll-viewport>\n\n        <mat-button-toggle-group name=\"sortDirection\" value=\"{{ selectedColumn.SortDirection }}\">\n            <mat-button-toggle id=\"filter-columns-sort-ascending\" value=\"asc\" (change)=\"onSortingValueChange($event.value)\">\n                <span i18n=\"@@filterColumns-btn-ascsort\">Ascending</span>\n                <mat-icon>arrow_upward</mat-icon>\n            </mat-button-toggle>\n            <mat-button-toggle id=\"filter-columns-sort-descending\" value=\"desc\" (change)=\"onSortingValueChange($event.value)\">\n                <span i18n=\"@@filterColumns-btn-descsort\">Descending</span>\n                <mat-icon>arrow_downward</mat-icon>\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button mat-raised-button id=\"filter-columns-close\" [mat-dialog-close]=\"cancelResponse\">\n            <span i18n=\"@@action-btn-cancel\">Cancel</span>\n        </button>\n        <button mat-raised-button id=\"filter-columns-filter\" (click)=\"onApplyFiltersButton()\" color=\"accent\">\n            <span i18n=\"@@action-btn-filter\">Filter</span>\n        </button>\n    </mat-dialog-actions>\n</div>\n", styles: [".filter-columns{position:relative!important}.filter-columns .close-icon{position:absolute;top:-20px;right:-20px}.filter-columns mat-form-field{width:100%}.filter-columns .filter-column-viewport{height:13em;border:1px solid lightgray}.filter-columns .filter-column-item{height:25px;padding:.2em .5em}.filter-columns mat-button-toggle-group{margin-top:16px;width:100%}.filter-columns mat-button-toggle-group mat-button-toggle{flex:1 1 auto}.filter-columns mat-dialog-actions button{flex:1 1 auto}\n"], components: [{ type: i3.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i5.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i6.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { type: i7.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "id", "labelPosition", "name", "required", "checked", "disabled", "indeterminate", "aria-describedby", "value"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i8.MatButtonToggle, selector: "mat-button-toggle", inputs: ["disableRipple", "aria-labelledby", "tabIndex", "appearance", "checked", "disabled", "id", "name", "aria-label", "value"], outputs: ["change"], exportAs: ["matButtonToggle"] }], directives: [{ type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["type", "mat-dialog-close", "aria-label", "matDialogClose"], exportAs: ["matDialogClose"] }, { type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.MatLabel, selector: "mat-label" }, { type: i9.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: i8.MatButtonToggleGroup, selector: "mat-button-toggle-group", inputs: ["appearance", "name", "vertical", "value", "multiple", "disabled"], outputs: ["valueChange", "change"], exportAs: ["matButtonToggleGroup"] }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }], pipes: { "filterCriteria": i11.FilterColumnValuesPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.12", ngImport: i0, type: FilterColumnsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'filter-columns',
                    templateUrl: './filter-columns.component.html',
                    styleUrls: ['./filter-columns.component.scss'],
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: i2.FormBuilder }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,