{"version":3,"file":"ngx-advanced-material-table.js","sources":["../../../projects/ngx-advanced-material-table/src/lib/interfaces/column-definition.interface.ts","../../../projects/ngx-advanced-material-table/src/lib/helpers/values.helper.ts","../../../projects/ngx-advanced-material-table/src/lib/interfaces/enums/dialog-action.enum.ts","../../../projects/ngx-advanced-material-table/src/lib/pipes/filter.pipe.ts","../../../projects/ngx-advanced-material-table/src/lib/components/filter-columns/filter-columns.component.html","../../../projects/ngx-advanced-material-table/src/lib/components/filter-columns/filter-columns.component.ts","../../../projects/ngx-advanced-material-table/src/lib/helpers/columns.helper.ts","../../../projects/ngx-advanced-material-table/src/lib/helpers/table-builder.helper.ts","../../../projects/ngx-advanced-material-table/src/lib/services/local-storage.service.ts","../../../projects/ngx-advanced-material-table/src/lib/ngx-advanced-material-table.component.html","../../../projects/ngx-advanced-material-table/src/lib/ngx-advanced-material-table.component.ts","../../../projects/ngx-advanced-material-table/src/lib/modules/material.module.ts","../../../projects/ngx-advanced-material-table/src/lib/ngx-advanced-material-table.module.ts","../../../projects/ngx-advanced-material-table/src/public-api.ts","../../../projects/ngx-advanced-material-table/src/ngx-advanced-material-table.ts"],"sourcesContent":["import { DialogActionType } from './enums/dialog-action.enum';\n\nexport type ColumnValueType = string | number | Date;\n\nexport enum ColumnType {\n    String,\n    DateTime,\n    Date,\n    Time,\n    Actions,\n    DropDown,\n    Icon,\n    NumberInput,\n    DropDownDynamic,\n    Image,\n    Link,\n}\n\n/**\n * IColumnDefinitionBase used to\n */\nexport interface IColumnDefinitionBase {\n    Field: string;\n    Title: string;\n    Display: boolean;\n    SortDirection?: 'asc' | 'desc';\n}\n\nexport interface IColumnDefinition extends IColumnDefinitionBase {\n    ColumnType: ColumnType;\n    MatIconName?: string;\n    IdField?: string;\n    FilterValues?: ColumnValueType[];\n    NumberInputOptions?: {\n        MinInputNumber?: number;\n        MaxInputNumber?: number;\n        MinInputNumberField?: string;\n        MaxInputNumberField?: string;\n    };\n\n    /**\n     * Add another Field's value as a Suffix for the current field\n     */\n    Suffix?: {\n        Field: string;\n    };\n}\n\nexport interface IAdvancedRowMenu {\n    Id: string;\n    Icon: string;\n    Action: number;\n    Text: string;\n    I18nId: string;\n}\n\nexport interface IDistinctColumns {\n    name: ColumnValueType;\n    displayedName: ColumnValueType;\n    checked: boolean;\n}\n\nexport interface IFilterColumnsResponse {\n    action: DialogActionType;\n    sortingHasChanged?: boolean;\n    selectedColumn?: IColumnDefinition;\n}\n\nexport interface IFilterColumnsData {\n    selectedColumn: IColumnDefinition;\n    distinctData: IDistinctColumns[];\n}\n","export class Value {\n    static getDistinctItems(items: string[]): string[] {\n        const newArray: string[] = [];\n        items.forEach((item) => {\n            if (newArray.indexOf(item) === -1) {\n                newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n\n    static splitStringBySeperator(text: string, seperator = ','): string[] {\n        if (Value.isNullOrWhiteSpace(text)) {\n            return [];\n        }\n        let strs = text.split(seperator);\n        strs = strs.map((str) => str.trim());\n        return strs.filter((str) => Value.isNotNullOrWhiteSpace(str));\n    }\n\n    static extractValueSplitBySeparator(value: string, separator: string, index: number): string {\n        return value.indexOf(separator) > -1 ? value.split('_')[index] : '';\n    }\n\n    static isNumber(value: any): boolean {\n        if (Value.isNotNullOrUndefined(value) && /^\\d+(\\.\\d+)?$/.test(value.toString())) {\n            return true;\n        }\n        return false;\n    }\n\n    static isNumberWithPattern(value: any, pattern: RegExp): boolean {\n        if (Value.isNotNullOrUndefined(value) && pattern.test(value.toString())) {\n            return true;\n        }\n        return false;\n    }\n\n    static clearArray(value: any): any {\n        if (Value.isArray(value)) {\n            value.splice(0, value.length);\n        }\n    }\n\n    static isArray(value: any): any {\n        if (Value.isNotNullOrUndefined(value) && value instanceof Array) {\n            return true;\n        }\n        return false;\n    }\n\n    static isString(value: any): boolean {\n        if (typeof value === 'string') {\n            return true;\n        }\n        return false;\n    }\n\n    static isArrayWithItems(value: any): any {\n        if (Value.isArray(value) && value.length > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    static isNullOrUndefined(value: any): any {\n        return !Value.isNotNullOrUndefined(value);\n    }\n\n    static isNotNullOrUndefined(value: any): boolean {\n        if (value !== undefined && value !== null) {\n            return true;\n        }\n        return false;\n    }\n\n    static isNotNullOrWhiteSpace(value: string): boolean {\n        if (Value.isNotNullOrUndefined(value) && value.trim() !== '') {\n            return true;\n        }\n        return false;\n    }\n\n    static isNullOrWhiteSpace(value: string): boolean {\n        return !Value.isNotNullOrWhiteSpace(value);\n    }\n\n    static isStringContains(source: string, toBeMatched: string, caseSensitive = true): boolean {\n        if (!source || !toBeMatched) {\n            return false;\n        }\n        if (caseSensitive) {\n            if (source.indexOf(toBeMatched) !== -1) {\n                return true;\n            }\n            return false;\n        } else {\n            if (source.toLocaleLowerCase().indexOf(toBeMatched.toLocaleLowerCase()) !== -1) {\n                return true;\n            }\n            return false;\n        }\n    }\n\n    static isArrayContains(sourceList: string[], toBeMatched: string, caseSensitive = true): boolean {\n        if (!sourceList || !toBeMatched) {\n            return false;\n        }\n\n        for (const source of sourceList) {\n            if (caseSensitive) {\n                if (source.indexOf(toBeMatched) !== -1) {\n                    return true;\n                }\n            } else {\n                if (source.toLocaleLowerCase().indexOf(toBeMatched.toLocaleLowerCase()) !== -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n","export enum DialogActionType {\n    Ok = 'Ok',\n    Cancel = 'Cancel',\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IDistinctColumns } from '../interfaces/column-definition.interface';\n\n@Pipe({ name: 'filterCriteria' })\nexport class FilterColumnValuesPipe implements PipeTransform {\n    transform(items: IDistinctColumns[], searchText: string): IDistinctColumns[] {\n        if (!items) {\n            return [];\n        }\n        if (!searchText) {\n            return items;\n        }\n        searchText = searchText.toLowerCase();\n        return items.filter((it) => {\n            return it.name.toString().toLowerCase().includes(searchText);\n        });\n    }\n}\n","<div class=\"filter-columns\">\n    <button mat-icon-button class=\"close-icon\" [mat-dialog-close]=\"cancelResponse\">\n        <mat-icon>close</mat-icon>\n    </button>\n\n    <h3 mat-dialog-title i18n=\"@@filter-columns-label-filterRowsHeading\">Filter rows</h3>\n\n    <mat-dialog-content>\n        <form id=\"formFilterRoutesPlanning\" role=\"form\" [formGroup]=\"filterForm\">\n            <mat-form-field>\n                <mat-label i18n=\"@@formControl-label-filterGrid\">Search filters</mat-label>\n                <input matInput type=\"text\" formControlName=\"SearchFilters\" id=\"FilterString\" />\n            </mat-form-field>\n        </form>\n\n        <cdk-virtual-scroll-viewport itemSize=\"15\" class=\"filter-column-viewport\">\n            <span *ngIf=\"distinctColumnValues.length === 0\" i18n=\"@@routeplanning-filter-column-no-values\">No available values</span>\n\n            <div\n                class=\"filter-column-item\"\n                *cdkVirtualFor=\"let value of distinctColumnValues | filterCriteria: searchFiltersValue; let i = index\"\n            >\n                <mat-checkbox [value]=\"value.name\" [checked]=\"value.checked\" (change)=\"onSelectFilter($event)\">\n                    <span> {{ value.displayedName }}</span>\n                </mat-checkbox>\n            </div>\n        </cdk-virtual-scroll-viewport>\n\n        <mat-button-toggle-group name=\"sortDirection\" value=\"{{ selectedColumn.SortDirection }}\">\n            <mat-button-toggle id=\"filter-columns-sort-ascending\" value=\"asc\" (change)=\"onSortingValueChange($event.value)\">\n                <span i18n=\"@@filterColumns-btn-ascsort\">Ascending</span>\n                <mat-icon>arrow_upward</mat-icon>\n            </mat-button-toggle>\n            <mat-button-toggle id=\"filter-columns-sort-descending\" value=\"desc\" (change)=\"onSortingValueChange($event.value)\">\n                <span i18n=\"@@filterColumns-btn-descsort\">Descending</span>\n                <mat-icon>arrow_downward</mat-icon>\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button mat-raised-button id=\"filter-columns-close\" [mat-dialog-close]=\"cancelResponse\">\n            <span i18n=\"@@action-btn-cancel\">Cancel</span>\n        </button>\n        <button mat-raised-button id=\"filter-columns-filter\" (click)=\"onApplyFiltersButton()\" color=\"accent\">\n            <span i18n=\"@@action-btn-filter\">Filter</span>\n        </button>\n    </mat-dialog-actions>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport {\n    IColumnDefinition,\n    ColumnType,\n    IDistinctColumns,\n    IFilterColumnsResponse,\n    IFilterColumnsData,\n} from '../../interfaces/column-definition.interface';\nimport { Value } from '../../helpers/values.helper';\nimport { DialogActionType } from '../../interfaces/enums/dialog-action.enum';\n\n@Component({\n    selector: 'filter-columns',\n    templateUrl: './filter-columns.component.html',\n    styleUrls: ['./filter-columns.component.scss'],\n})\nexport class FilterColumnsComponent implements OnInit {\n    filterForm: FormGroup;\n    searchFiltersValue: string = '';\n    selectedColumn: IColumnDefinition;\n    initialSortingDirection?: 'asc' | 'desc';\n    distinctColumnValues: IDistinctColumns[] = [];\n    cancelResponse: IFilterColumnsResponse = { action: DialogActionType.Cancel };\n    columnType = ColumnType;\n\n    constructor(\n        public dialogRef: MatDialogRef<FilterColumnsComponent>,\n        private fb: FormBuilder,\n        @Inject(MAT_DIALOG_DATA) public context: IFilterColumnsData\n    ) {\n        this.selectedColumn = this.context.selectedColumn;\n        this.distinctColumnValues = this.sortColumns(this.context.distinctData);\n        this.initialSortingDirection = this.selectedColumn.SortDirection;\n        this.filterForm = this.fb.group({\n            SearchFilters: [''],\n        });\n    }\n\n    ngOnInit(): void {\n        this.filterForm.controls.SearchFilters.valueChanges.subscribe(() => this.onSearchFiltersValueChanged());\n    }\n\n    onSearchFiltersValueChanged(): void {\n        this.searchFiltersValue = this.filterForm.controls.SearchFilters.value;\n    }\n\n    onSelectFilter(change: MatCheckboxChange) {\n        this.distinctColumnValues.forEach((x) => {\n            if (x.name === change.source.value) {\n                x.checked = change.checked;\n            }\n        });\n    }\n\n    onSortingValueChange(value: 'asc' | 'desc') {\n        if (this.selectedColumn.SortDirection === value) {\n            this.selectedColumn.SortDirection = undefined;\n        } else {\n            this.selectedColumn.SortDirection = value;\n        }\n    }\n\n    onApplyFiltersButton(): void {\n        this.selectedColumn.FilterValues = [];\n        this.selectedColumn.FilterValues = this.distinctColumnValues.filter((x) => x.checked === true).map((x) => x.name);\n\n        const response: IFilterColumnsResponse = {\n            action: DialogActionType.Ok,\n            sortingHasChanged: this.initialSortingDirection !== this.selectedColumn.SortDirection,\n            selectedColumn: this.selectedColumn,\n        };\n\n        this.dialogRef.close(response);\n    }\n\n    private sortColumns(columns: IDistinctColumns[]): IDistinctColumns[] {\n        if (columns.length === 0) {\n            return [];\n        }\n\n        if (columns[0].name instanceof Date) {\n            columns.sort((a, b) => (a.name > b.name ? 1 : -1));\n        } else if (Value.isNumber(columns[0].name)) {\n            columns.sort((a, b) => (a.name as number) - (b.name as number));\n        } else if (Value.isString(columns[0].name)) {\n            columns.sort((a, b) => (a.name as string).localeCompare(b.name as string));\n        }\n\n        return columns;\n    }\n}\n","import { ColumnType, IColumnDefinition } from '../interfaces/column-definition.interface';\n\nexport class ColumnHelper {\n    static getContent<T>(field: string, element: T): string {\n        if (field.indexOf('.') === -1) {\n            return element[field];\n        }\n\n        // Activate the way to get text from  Class.Element.XX.XX.XX\n        const fieldNames = field.split('.');\n\n        let returnValue = element[fieldNames[0]];\n        for (let index = 1; index < fieldNames.length; index++) {\n            returnValue = returnValue[fieldNames[index]];\n        }\n\n        return returnValue ?? '';\n    }\n\n    static getToolTip<T>(column: IColumnDefinition, element: T) {\n        if (!element || !column || !element[column.Field]) {\n            return '';\n        }\n\n        let val: string;\n        switch (column.ColumnType) {\n            case ColumnType.Date:\n            case ColumnType.DateTime:\n            case ColumnType.Time:\n            case ColumnType.Icon:\n            case ColumnType.DropDown:\n            case ColumnType.String:\n            case ColumnType.Link:\n            case ColumnType.Image:\n                val = element[column.Field];\n                break;\n\n            default:\n                val = '';\n                break;\n        }\n        return val;\n    }\n\n    static isImmutableColumn(column: IColumnDefinition): boolean {\n        // Columns types that cannot be hidden, moved or filtered\n        return column.ColumnType === ColumnType.Actions || column.ColumnType === ColumnType.Icon;\n    }\n\n    static canColumnBeHidden(column: IColumnDefinition): boolean {\n        return !this.isImmutableColumn(column);\n    }\n\n    static canColumnBeMoved(column: IColumnDefinition): boolean {\n        return !this.isImmutableColumn(column);\n    }\n\n    static canColumnBeFiltered(column: IColumnDefinition): boolean {\n        return !this.isImmutableColumn(column);\n    }\n\n    static isFilteringEnabledOnColumn(column: IColumnDefinition): boolean {\n        if (!this.canColumnBeFiltered(column)) {\n            return false;\n        }\n\n        if (!column.Title) {\n            return false;\n        }\n\n        return true;\n    }\n\n    static hasFiltersOrSortingEnabled(column: IColumnDefinition): boolean {\n        if (!column) {\n            return false;\n        }\n\n        if (column.SortDirection) {\n            return true;\n        }\n\n        if (column.FilterValues && column.FilterValues.length > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    static isCellClickable(column: IColumnDefinition): boolean {\n        switch (column.ColumnType) {\n            case ColumnType.Actions:\n            case ColumnType.Icon:\n            case ColumnType.DropDown:\n            case ColumnType.NumberInput:\n            case ColumnType.DropDownDynamic:\n                return false;\n            default:\n                return true;\n        }\n    }\n}\n","import { ColumnHelper } from './columns.helper';\n\nexport class TableBuilderHelper {\n    static buildTable<T>(dataArray: T[], columns: string[], columnNames: string[]): string {\n        let out = '<table><thead><tr>';\n        for (const h of columnNames) {\n            out += '<th>' + h + '</th>';\n        }\n        out += '</tr></thead><tbody>';\n        for (const data of dataArray) {\n            out += '<tr>';\n            for (const j of columns) {\n                if (j !== 'select' && j !== 'actions') {\n                    out += '<td>' + (ColumnHelper.getContent(j, data) || '-') + '</td>';\n                }\n            }\n            out += '</tr>';\n        }\n        out += '</tbody></table>';\n        return out;\n    }\n\n    static printPageBuilderDefault(table: string, printedOnLabel: string = 'Printed On'): string {\n        return (\n            '<html><head>' +\n            '<style type=\"text/css\" media=\"print\">' +\n            '  @page { size: auto;   margin: 25px 0 25px 0; }' +\n            '</style>' +\n            '<style type=\"text/css\" media=\"all\">' +\n            'table{border-collapse: collapse; font-size: 12px; }\\n' +\n            'table, th, td {border: 1px solid grey}\\n' +\n            'th, td {text-align: center; vertical-align: middle;}\\n' +\n            'p {font-weight: bold; margin-left:20px }\\n' +\n            'table { width:94%; margin-left:3%; margin-right:3%}\\n' +\n            'div.bs-table-print { text-align:center;}\\n' +\n            '</style></head><title>Print Table</title><body>' +\n            '<p>' +\n            printedOnLabel +\n            ': ' +\n            new Date() +\n            ' </p>' +\n            '<div class=\"bs-table-print\">' +\n            table +\n            '</div></body></html>'\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Comunication with the localStorage\n */\n@Injectable({ providedIn: 'root' })\nexport class LocalStorageService {\n    set(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    get(key: string): any {\n        return localStorage.getItem(key);\n    }\n\n    remove(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    setAsJson(localStorageKey: string, state: any, replacer?: (number | string)[]): void {\n        localStorage.setItem(localStorageKey, JSON.stringify(state, replacer));\n    }\n\n    getAsJson(localStorageKey: string): any {\n        let storedValue = localStorage.getItem(localStorageKey);\n        return storedValue ? JSON.parse(storedValue) : null;\n    }\n\n    exists(localStorageKey: string): boolean {\n        if (localStorage.getItem(localStorageKey)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n","<div>\n    <div class=\"table-top-panel\" *ngIf=\"tableConfiguration.AllowFilter || tableConfiguration.AllowActions\">\n        <div class=\"table-filter\">\n            <ng-container *ngIf=\"tableConfiguration.AllowFilter\">\n                <mat-form-field>\n                    <input\n                        matInput\n                        id=\"{{ tableConfiguration.Id }}-table-filter-field\"\n                        (keyup)=\"applyMainFilter($event.target)\"\n                        i18n-placeholder=\"@@placeholder-text-filterResult\"\n                        placeholder=\"Filter on results...\"\n                    />\n                </mat-form-field>\n            </ng-container>\n        </div>\n\n        <div class=\"table-actions\" *ngIf=\"tableConfiguration.AllowActions\">\n            <button\n                mat-icon-button\n                id=\"{{ tableConfiguration.Id }}-table-clearAllFilters\"\n                onclick=\"this.blur()\"\n                (click)=\"clearAllFilters()\"\n                [matTooltip]=\"templateClearAllFilters.innerText\"\n            >\n                <mat-icon>filter_list_off</mat-icon>\n            </button>\n\n            <button\n                mat-icon-button\n                id=\"{{ tableConfiguration.Id }}-table-showColumns\"\n                [matMenuTriggerFor]=\"visibleColumnsMenu\"\n                [matTooltip]=\"templateShowHide.innerText\"\n            >\n                <mat-icon>view_column</mat-icon>\n            </button>\n\n            <mat-menu #visibleColumnsMenu=\"matMenu\">\n                <ng-template matMenuContent>\n                    <div id=\"{{ tableConfiguration.Id }}-table-columns-checkbox\">\n                        <div\n                            mat-menu-item\n                            *ngFor=\"let column of tableColumns; let i = index\"\n                            (click)=\"onColumnChange(i, $event); $event.stopPropagation()\"\n                        >\n                            <mat-icon *ngIf=\"column.Display\" color=\"accent\">check_box</mat-icon>\n                            <mat-icon *ngIf=\"!column.Display\">check_box_outline_blank</mat-icon>\n                            <span>{{ column.Title }}</span>\n                        </div>\n                    </div>\n                </ng-template>\n            </mat-menu>\n\n            <button\n                mat-icon-button\n                id=\"{{ tableConfiguration.Id }}-table-export-to-excel-button\"\n                [matTooltip]=\"templateExportCsv.innerText\"\n                (click)=\"exportToExcel()\"\n                [disabled]=\"noRowsDisplayed\"\n            >\n                <mat-icon>file_download</mat-icon>\n            </button>\n\n            <button\n                mat-icon-button\n                id=\"{{ tableConfiguration.Id }}-table-print-button\"\n                (click)=\"sendToPrinter()\"\n                [matTooltip]=\"templatePrint.innerText\"\n                [disabled]=\"noRowsDisplayed\"\n            >\n                <mat-icon>print</mat-icon>\n            </button>\n\n            <template #templateShowHide i18n=\"@@table-tooltip-grid-showColumns\">Select visible columns</template>\n            <template #templateExportCsv i18n=\"@@table-tooltip-export-csv\">Export to Excel</template>\n            <template #templateClearAllFilters i18n=\"@@table-tooltip-clear-all-filters\">Clear filters and sorting</template>\n            <template #templatePrint i18n=\"@@action-btn-print\">Print</template>\n        </div>\n    </div>\n\n    <div class=\"table-pagination\" *ngIf=\"tableConfiguration.AllowPagination\">\n        <mat-paginator\n            [pageSizeOptions]=\"[10, 25, 50, 100]\"\n            id=\"{{ tableConfiguration.Id }}-table-paginator\"\n            showFirstLastButtons\n        ></mat-paginator>\n    </div>\n\n    <mat-table\n        id=\"{{ tableConfiguration.Id }}-table\"\n        [dataSource]=\"dataSource\"\n        matSort\n        matSortDisableClear=\"false\"\n        cdkDropListGroup\n        cdkDropList\n        cdkDropListLockAxis=\"x\"\n        cdkDropListOrientation=\"horizontal\"\n        (cdkDropListDropped)=\"headerDropListDropped($event)\"\n    >\n        <!-- Select Check Box Column -->\n        <ng-container matColumnDef=\"select\">\n            <mat-header-cell *matHeaderCellDef>\n                <mat-checkbox\n                    *ngIf=\"tableConfiguration.MultipleSelect\"\n                    (change)=\"$event ? masterToggle() : null\"\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                >\n                </mat-checkbox>\n            </mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n                <mat-checkbox\n                    (click)=\"$event.stopPropagation()\"\n                    (change)=\"$event ? onRowChecked(row) : null\"\n                    [checked]=\"selection.isSelected(row)\"\n                >\n                </mat-checkbox>\n            </mat-cell>\n        </ng-container>\n\n        <ng-container *ngFor=\"let column of tableColumns; let i = index\" matColumnDef=\"{{ column.Field }}\">\n            <mat-header-cell\n                *matHeaderCellDef\n                cdkDrag\n                (cdkDragStarted)=\"headerDragStarted(i)\"\n                [cdkDragData]=\"{ name: column.Field }\"\n                [cdkDragDisabled]=\"!canColumnBeMoved(column)\"\n                [ngClass]=\"getColumnClassName(column)\"\n                [matTooltip]=\"column.Title\"\n            >\n                <ng-container *ngIf=\"isFilteringEnabledOnColumn(column)\">\n                    <span mat-sort-header [class.selected]=\"hasFiltersOrSortingEnabled(column)\">{{ column.Title }}</span>\n                    <button\n                        mat-icon-button\n                        disableRipple\n                        onclick=\"this.blur()\"\n                        (click)=\"openFilterDialog(column)\"\n                        [disabled]=\"noRowsDisplayed\"\n                        [class.selected]=\"hasFiltersOrSortingEnabled(column)\"\n                    >\n                        <mat-icon>filter_list</mat-icon>\n                    </button>\n                </ng-container>\n            </mat-header-cell>\n            <mat-cell\n                *matCellDef=\"let element; let rowIndex = index\"\n                [ngClass]=\"getColumnClassName(column)\"\n                (click)=\"isCellClickable(column) ? onRowChecked(element) : null\"\n            >\n                <div [matTooltip]=\"getToolTip(element, column)\">\n                    <ng-container [ngSwitch]=\"column.ColumnType\">\n                        <!-- DateTime -->\n                        <span *ngSwitchCase=\"columnType.DateTime\"> {{ getContent(column, element) }}</span>\n                        <!-- Date -->\n                        <span *ngSwitchCase=\"columnType.Date\"> {{ getContent(column, element) }}</span>\n                        <!-- Time -->\n                        <span *ngSwitchCase=\"columnType.Time\"> {{ getContent(column, element) }}</span>\n                        <!-- String -->\n                        <span *ngSwitchCase=\"columnType.String\"> {{ getContent(column, element) }}</span>\n                        <!-- Link -->\n                        <span *ngSwitchCase=\"columnType.Link\" (click)=\"onHyperLinkClicked(element, column)\">\n                            <a href=\"{{ getContent(column, element) }}\" target=\"_blank\" rel=\"noopener\">{{ getContent(column, element) }}</a>\n                        </span>\n                        <!-- Image -->\n                        <div *ngSwitchCase=\"columnType.Image\">\n                            <img src=\"{{ getContent(column, element) }}\" alt=\"image\" />\n                        </div>\n                        <!-- Actions -->\n                        <!-- <ng-container *ngSwitchCase=\"columnType.Actions\">\n                            <app-advance-table-row-menu\n                                [rowData]=\"element\"\n                                [tableRowMenu]=\"RowActionsConfig\"\n                                (actionSelected)=\"onActionSelected($event)\"\n                            ></app-advance-table-row-menu>\n                        </ng-container> -->\n                        <!-- Dropdown -->\n                        <!-- <ng-container *ngSwitchCase=\"columnType.DropDown\">\n                            <app-advanced-table-row-dropdown\n                                [rowData]=\"element\"\n                                [columnData]=\"column\"\n                                [tableRowDropDown]=\"RowDropDownConfig\"\n                                (dropDownSelected)=\"onDropDownSelected($event)\"\n                            ></app-advanced-table-row-dropdown>\n                        </ng-container> -->\n                        <!-- Icon -->\n                        <ng-container *ngSwitchCase=\"columnType.Icon\">\n                            <button\n                                [id]=\"column.Title + '-' + element[column.IdField!]\"\n                                mat-icon-button\n                                (click)=\"iconClick(element, column)\"\n                            >\n                                <mat-icon> {{ column.MatIconName }}</mat-icon>\n                                {{ getContent(column, element) }}\n                            </button>\n                        </ng-container>\n                        <!-- Number Input -->\n                        <ng-container *ngSwitchCase=\"columnType.NumberInput\">\n                            <mat-form-field floatLabel=\"never\">\n                                <input\n                                    matInput\n                                    onlyNumbers\n                                    type=\"number\"\n                                    [min]=\"getMinValueForNumberInput(element, column)\"\n                                    [max]=\"getMaxValueForNumberInput(element, column)\"\n                                    (change)=\"numberInputChange(element, column, $event)\"\n                                    [value]=\"element[column.Field]\"\n                                />\n                                <!-- Suffix -->\n                                <span matSuffix class=\"suffix\" *ngIf=\"column.Suffix\">\n                                    {{ element[column.Suffix.Field] }}\n                                </span>\n                            </mat-form-field>\n                        </ng-container>\n                    </ng-container>\n                    <!-- Suffix -->\n                    <span class=\"suffix\" *ngIf=\"column.Suffix && column.ColumnType !== columnType.NumberInput\">\n                        {{ element[column.Suffix.Field] }}\n                    </span>\n                </div>\n            </mat-cell>\n        </ng-container>\n\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n        <mat-row\n            *matRowDef=\"let row; columns: displayedColumns\"\n            id=\"{{ row.Id }}\"\n            [ngClass]=\"getRowClassName()\"\n            (dblclick)=\"onDoubleClick(row)\"\n        ></mat-row>\n    </mat-table>\n\n    <div *ngIf=\"noRowsDisplayed\" class=\"no-records\">\n        <span i18n=\"@@table-noResultFound\">No matching records found</span>\n    </div>\n</div>\n","import * as _ from 'lodash';\n// FIXME(Fernando Abel): XLSX module not being found\n// import * as xlsx from 'xlsx';\nimport { Component, OnInit, Input, ViewChild, EventEmitter, Output, ChangeDetectorRef, AfterViewInit } from '@angular/core';\nimport { Sort, ArrowViewStateTransition, MatSortHeader, MatSort } from '@angular/material/sort';\nimport { LocalStorageService } from './services/local-storage.service';\nimport { take } from 'rxjs/operators';\nimport { ITableConfiguration } from './interfaces/table-configuration.interface';\nimport {\n    IColumnDefinition,\n    ColumnType,\n    IAdvancedRowMenu,\n    IFilterColumnsData,\n    IFilterColumnsResponse,\n    IDistinctColumns,\n} from './interfaces/column-definition.interface';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatDialog } from '@angular/material/dialog';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { IKeyFilterValues } from './interfaces/key-filter-values.interface';\nimport { TableBuilderHelper } from './helpers/table-builder.helper';\nimport { Value } from './helpers/values.helper';\nimport { FilterColumnsComponent } from './components/filter-columns/filter-columns.component';\nimport { ColumnHelper } from './helpers/columns.helper';\n\n@Component({\n    selector: 'ngx-advanced-material-table',\n    templateUrl: './ngx-advanced-material-table.component.html',\n    styleUrls: ['./ngx-advanced-material-table.component.scss'],\n})\nexport class AdvancedMaterialTableComponent<T = any> implements OnInit, AfterViewInit {\n    @Input()\n    tableConfiguration!: ITableConfiguration;\n\n    @Input()\n    actionConfiguration?: IAdvancedRowMenu[];\n\n    @Input()\n    set tableColumns(value: IColumnDefinition[]) {\n        this.tableColumnList = _.cloneDeep(value);\n    }\n    get tableColumns(): IColumnDefinition[] {\n        return this.tableColumnList;\n    }\n\n    private dataset!: T[];\n    @Input() set data(value: T[]) {\n        this.dataset = value;\n        this.initializeTable();\n    }\n    get data(): T[] {\n        return this.dataset;\n    }\n\n    @Input() set selectedData(initialSelection: T[]) {\n        this.selection = new SelectionModel<any>(true, initialSelection);\n    }\n\n    get selectedData() {\n        return this.selection.selected;\n    }\n\n    @Output() actionSelected: EventEmitter<[T, number]> = new EventEmitter();\n    @Output() iconClicked: EventEmitter<[T, IColumnDefinition]> = new EventEmitter();\n    @Output() rowSelected: EventEmitter<[boolean, T[]]> = new EventEmitter<[boolean, T[]]>();\n    @Output() numberChange: EventEmitter<[T, IColumnDefinition, number]> = new EventEmitter();\n    @Output() catalogueClicked = new EventEmitter();\n    @Output() searchCatalogueClicked = new EventEmitter();\n    @Output() clearCatalogueClicked = new EventEmitter();\n    @Output() hyperLinkClicked = new EventEmitter();\n\n    @ViewChild(MatPaginator) paginator!: MatPaginator;\n    @ViewChild(MatSort) sort!: MatSort;\n\n    dataSource!: MatTableDataSource<T>;\n    displayedColumns: string[] = [];\n\n    noRowsDisplayed: boolean = false;\n    hasHiddenColumns: boolean = false;\n    columnType = ColumnType;\n    selection = new SelectionModel<T>(true, []);\n\n    private tableColumnList: IColumnDefinition[] = [];\n    private mainFilter = '';\n\n    constructor(private dialog: MatDialog, private localStorageService: LocalStorageService, private cdref: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.loadFromStorage();\n        this.renderColumns();\n        this.localizePaginator();\n    }\n\n    ngAfterViewInit(): void {\n        this.sortColumns();\n        this.sort.sortChange.subscribe((col: Sort) => {\n            if (!col.active) {\n                return;\n            }\n\n            this.tableColumnList.forEach((column) => {\n                if (column.Field !== col.active) {\n                    column.SortDirection = undefined;\n                } else {\n                    column.SortDirection = col.direction as 'asc' | 'desc' | undefined;\n                }\n            });\n        });\n\n        this.initializeTable();\n    }\n\n    getContent = (column: IColumnDefinition, element: T) => ColumnHelper.getContent(column.Field, element);\n    getToolTip = (row: T, column: IColumnDefinition) => ColumnHelper.getToolTip<T>(column, row);\n\n    private initializeTable(): void {\n        if (this.data) {\n            this.noRowsDisplayed = this.data.length === 0;\n        }\n\n        this.dataSource = new MatTableDataSource<T>(this.data);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sortingDataAccessor = (item, property) => {\n            const content = ColumnHelper.getContent(property, item);\n\n            if (!content) {\n                return '';\n            }\n\n            return content.toString().toLowerCase();\n        };\n        this.dataSource.sort = this.sort;\n\n        this.dataSource.filterPredicate = this.getFilterPredicate();\n        this.applyFilters();\n    }\n\n    private renderColumns(): void {\n        this.displayedColumns = this.tableColumns.filter((column) => column.Display === true).map((column) => column.Field);\n        if (this.tableConfiguration.AllowSelect) {\n            // Add the 'select' column at the start\n            this.displayedColumns.unshift('select');\n        }\n    }\n\n    onRowChecked(row: T): void {\n        if (this.tableConfiguration.MultipleSelect) {\n            this.multipleRowSelection(row);\n        } else {\n            this.singleRowSelection(row);\n        }\n\n        this.rowSelected.emit([false, this.selection.selected]);\n    }\n\n    onDoubleClick(row: T): void {\n        this.rowSelected.emit([true, [row]]);\n    }\n\n    masterToggle(): void {\n        this.isAllSelected() ? this.selection.clear() : this.dataSource.data.forEach((row) => this.selection.select(row));\n\n        this.rowSelected.emit([false, this.selection.selected]);\n    }\n\n    isAllSelected(): boolean {\n        const numSelected = this.selection.selected.length;\n        const numRows = this.dataSource.data.length;\n        return numSelected === numRows;\n    }\n\n    getFilterPredicate() {\n        return (row: T, filters: string): boolean => {\n            const filterData: IKeyFilterValues[] = JSON.parse(filters);\n            for (const filter of filterData) {\n                if (filter.values.length === 0) {\n                    continue;\n                }\n\n                let value = _.get(row, filter.key);\n                if (!value || value === '') {\n                    return false;\n                }\n\n                let index = -1;\n                if (filter.type === ColumnType.DateTime || filter.type === ColumnType.Date) {\n                    const dates = filter.values.map((x) => new Date(x));\n                    index = dates.findIndex((x) => x.getTime() === value.getTime());\n                } else if (Value.isArray(value)) {\n                    value = _.join(value, ',');\n                    index = filter.values.findIndex((x) => _.isEqual(x, value));\n                } else {\n                    index = filter.values.findIndex((x) => _.isEqual(x, value));\n                }\n\n                if (index === -1) {\n                    return false;\n                }\n            }\n\n            if (this.mainFilter && this.mainFilter.length > 0) {\n                let match = false;\n\n                filterData.forEach((filter) => {\n                    const value = _.get(row, filter.key);\n                    const stringValue = value.toLowerCase();\n                    match = match || stringValue.indexOf(this.mainFilter) !== -1;\n                });\n                return match;\n            }\n\n            return true;\n        };\n    }\n\n    onColumnChange(index: number, event: any): void {\n        if (this.tableColumns[index].Display && this.tableColumns.filter((c) => c.Display).length <= 1) {\n            event.preventDefault();\n            return;\n        }\n\n        this.tableColumns[index].Display = !this.tableColumns[index].Display;\n        this.renderColumns();\n        this.saveColumnConfig();\n    }\n\n    clearAllFilters(): void {\n        this.tableColumnList.forEach((column: IColumnDefinition) => {\n            column.SortDirection = undefined;\n            column.FilterValues = undefined;\n        });\n\n        // Clear sort, see https://github.com/angular/components/issues/10524\n        this.clearSort();\n\n        this.dataSource.filter = '[]';\n    }\n\n    /**\n     * Return from the Action Buttons\n     * @param action Value From the Action Buttons\n     */\n    onActionSelected(action: [T, number]): void {\n        this.actionSelected.emit(action);\n    }\n\n    getMinValueForNumberInput(element: T, column: IColumnDefinition): number | undefined {\n        if (!column || !column.NumberInputOptions) {\n            return;\n        }\n\n        if (column.NumberInputOptions.MinInputNumberField) {\n            return element[column.NumberInputOptions.MinInputNumberField];\n        }\n\n        return column.NumberInputOptions.MinInputNumber;\n    }\n\n    getMaxValueForNumberInput(element: T, column: IColumnDefinition): number | undefined {\n        if (!column.NumberInputOptions) {\n            return;\n        }\n\n        if (column.NumberInputOptions.MaxInputNumberField) {\n            return element[column.NumberInputOptions.MaxInputNumberField];\n        }\n\n        return column.NumberInputOptions.MaxInputNumber;\n    }\n\n    iconClick(element: T, column: IColumnDefinition): void {\n        this.iconClicked.emit([element, column]);\n    }\n\n    numberInputChange(element: T, column: IColumnDefinition, event: any): void {\n        this.numberChange.emit([element, column, event.target.value]);\n    }\n\n    onCatalogueClicked(element: T, column: IColumnDefinition): void {\n        this.catalogueClicked.emit([element, column]);\n    }\n\n    onCatalogueSearchClicked(element: T, column: IColumnDefinition): void {\n        this.searchCatalogueClicked.emit([element, column]);\n    }\n\n    onCatalogueClearClicked(element: T, column: IColumnDefinition): void {\n        this.clearCatalogueClicked.emit([element, column]);\n    }\n\n    onHyperLinkClicked(element: T, column: IColumnDefinition): void {\n        this.hyperLinkClicked.emit([element, column]);\n    }\n\n    private multipleRowSelection(row: T): void {\n        this.selection.toggle(row);\n    }\n\n    private singleRowSelection(row: T): void {\n        if (this.selection.isSelected(row)) {\n            this.selection.clear();\n        } else {\n            this.selection.clear();\n            this.selection.toggle(row);\n        }\n    }\n\n    private getDistinctValues(selectedColumn: IColumnDefinition): IDistinctColumns[] {\n        let result: IDistinctColumns[] = [];\n\n        this.data.forEach((row) => {\n            let value = _.get(row, selectedColumn.Field);\n            let displayedValue = value;\n\n            if (Value.isArray(value)) {\n                value = _.join(value, ',');\n                displayedValue = value;\n            }\n\n            if (value === undefined || value === null || value === '') {\n                return;\n            }\n\n            const isAlreadyChecked = selectedColumn.FilterValues ? selectedColumn.FilterValues.findIndex((x) => x === value) >= 0 : false;\n\n            result.push({\n                name: value,\n                displayedName: displayedValue,\n                checked: isAlreadyChecked,\n            });\n        });\n\n        result = _.uniqBy(result, (x: IDistinctColumns) => x.displayedName);\n\n        return result;\n    }\n\n    //#region Drag and Drop\n    headerDragStarted(index: number) {\n        // Purposedly in blank\n    }\n\n    headerDropListDropped(event: CdkDragDrop<IColumnDefinition>) {\n        if (!event) {\n            return;\n        }\n        const displayedColumns = this.displayedColumns.filter((x) => x != 'select');\n        const previousColumnIndex = this.tableColumns.findIndex((x) => x.Field === displayedColumns[event.previousIndex]);\n        const currentColumnIndex = this.tableColumns.findIndex((x) => x.Field === displayedColumns[event.currentIndex]);\n        if (this.canColumnBeMoved(this.tableColumns[currentColumnIndex])) {\n            this.moveItemInArray(this.tableColumns, previousColumnIndex, currentColumnIndex);\n            this.renderColumns();\n            this.saveColumnConfig();\n        }\n    }\n    //#endregion\n\n    //#region Sorting and Filtering\n\n    applyMainFilter(event: any): void {\n        this.mainFilter = event.value.trim().toLowerCase();\n        this.applyFilters();\n    }\n\n    private applyFilters(): void {\n        const filters: IKeyFilterValues[] = [];\n\n        this.tableColumnList.forEach((column) => {\n            if (!column.FilterValues) {\n                column.FilterValues = [];\n            }\n\n            filters.push({\n                key: column.Field,\n                type: column.ColumnType,\n                values: column.FilterValues,\n            });\n        });\n\n        if (filters.length > 0) {\n            this.dataSource.filter = JSON.stringify(filters);\n        }\n    }\n\n    private sortColumn(id: string, start?: 'asc' | 'desc') {\n        const currentColumn = this.sort.active;\n        const currentDirection = this.sort.direction;\n        if (id !== currentColumn || start !== currentDirection) {\n            this.sort.sort({ id: '', start, disableClear: false } as any);\n            this.sort.sort({ id, start, disableClear: false } as any);\n        }\n    }\n\n    private clearSort() {\n        // Clear sort, see https://github.com/angular/components/issues/10524\n        let sortable: any = { id: null, start: null, disableClear: false };\n        this.sort.sort(sortable);\n    }\n\n    private sortColumns(): void {\n        const id = this.tableColumns.findIndex((column) => column.SortDirection);\n        if (id === -1) {\n            return;\n        }\n\n        const columnName = this.tableColumns[id].Field;\n        const direction = this.tableColumns[id].SortDirection;\n\n        this.clearSort();\n\n        if (direction) {\n            this.sortColumn(columnName, direction);\n        }\n\n        // HACK(Fernando Abel): https://github.com/angular/components/issues/10242\n        const activeSortHeader = this.sort.sortables.get(columnName) as MatSortHeader;\n        if (activeSortHeader) {\n            const viewState: ArrowViewStateTransition = activeSortHeader._isSorted()\n                ? { fromState: direction, toState: 'active' }\n                : { fromState: 'active', toState: direction };\n            activeSortHeader._setAnimationTransitionState(viewState);\n        }\n\n        this.cdref.detectChanges();\n    }\n\n    //#endregion\n\n    //#region Dialogs\n\n    openFilterDialog(selectedColumn: IColumnDefinition): void {\n        const data: IFilterColumnsData = {\n            selectedColumn: _.cloneDeep(selectedColumn),\n            distinctData: this.getDistinctValues(selectedColumn),\n        };\n\n        const columnFilteringDialog = this.dialog.open(FilterColumnsComponent, {\n            disableClose: false,\n            autoFocus: false,\n            width: '350px',\n            panelClass: 'overlay-panel',\n            data,\n        });\n\n        columnFilteringDialog\n            .afterClosed()\n            .pipe(take(1))\n            .subscribe((response: IFilterColumnsResponse) => {\n                if (response && response.action === 'Ok') {\n                    this.filterByColumn(response);\n                    this.sortByTable(response);\n                }\n            });\n    }\n\n    //#endregion\n\n    //#region After FilterColumns response\n\n    private filterByColumn(response: IFilterColumnsResponse): void {\n        if (!response || !response.selectedColumn) {\n            return;\n        }\n\n        const column = this.tableColumnList.find((x) => x.Field === response.selectedColumn!.Field);\n\n        if (column) {\n            column.FilterValues = response.selectedColumn.FilterValues;\n        }\n\n        this.applyFilters();\n    }\n\n    private sortByTable(response: IFilterColumnsResponse): void {\n        if (response.sortingHasChanged === false) {\n            return;\n        }\n\n        const columnName = response.selectedColumn!.Field;\n        const direction = response.selectedColumn!.SortDirection;\n\n        this.tableColumnList.forEach((column) => {\n            column.SortDirection = column.Field !== columnName ? undefined : direction;\n        });\n\n        this.sortColumns();\n    }\n\n    //#endregion\n\n    //#region Print and Export\n\n    sendToPrinter(): void {\n        const selectedData = this.getDataToExportPrint();\n        const colNames = this.getDisplayedColumnNames();\n\n        const table = TableBuilderHelper.buildTable(selectedData, this.displayedColumns, colNames);\n\n        if (table) {\n            const newWin = window.open('#');\n            if (!newWin) return;\n            newWin.document.write(TableBuilderHelper.printPageBuilderDefault(table));\n            newWin.print();\n            newWin.close();\n        }\n    }\n\n    // TODO: Create a service for that, currently being used in advanced table\n    exportToExcel(): void {\n        // const tableTitle = TableTags.Table;\n        // const selectedData = this.getSelectedDataWithDisplayedColumnsOnly();\n        // const colNames = this.getDisplayedColumnNames();\n        // // generate a worksheet\n        // const ws = xlsx.utils.aoa_to_sheet([colNames]);\n        // xlsx.utils.sheet_add_json(ws, selectedData, {\n        //     header: this.displayedColumns.slice(1), // remove the 'select' column\n        //     skipHeader: true,\n        //     origin: 1,\n        // });\n        // // add to workbook\n        // const wb = xlsx.utils.book_new();\n        // xlsx.utils.book_append_sheet(wb, ws, tableTitle);\n        // // write workbook and force a download\n        // xlsx.writeFile(wb, `${tableTitle}.xls`, {\n        //     type: 'array',\n        //     bookType: 'xls',\n        // });\n    }\n\n    private getDataToExportPrint(): T[] {\n        if (!this.selection.isEmpty()) {\n            return this.selection.selected;\n        }\n        if (!this.dataSource.sort) {\n            return this.selection.selected;\n        }\n\n        return this.dataSource.sortData(this.dataSource.filteredData, this.dataSource.sort);\n    }\n\n    private getSelectedDataWithDisplayedColumnsOnly(): Partial<T>[] {\n        const selectedData = this.getDataToExportPrint();\n\n        return _.map(selectedData, (obj: T) => {\n            return _.pick(obj, this.displayedColumns);\n        });\n    }\n\n    private getDisplayedColumnNames(): string[] {\n        return this.tableColumns.filter((column) => column.Display === true).map((column) => column.Title);\n    }\n\n    //#endregion\n\n    //#region LocalStorage\n    private loadFromStorage(): void {\n        if (!this.tableConfiguration || !this.tableConfiguration.LocalStorageKey) {\n            return;\n        }\n\n        const localStorageColumns = this.localStorageService.getAsJson(this.tableConfiguration.LocalStorageKey) as IColumnDefinition[];\n\n        if (!localStorageColumns) {\n            return;\n        }\n\n        const tableColumnList = _.cloneDeep(this.tableColumns);\n        for (const obj of tableColumnList) {\n            const index = localStorageColumns.findIndex((i) => i.Field === obj.Field);\n            if (index !== -1) {\n                const previousIndex = this.tableColumns.findIndex((i) => i.Field === obj.Field);\n\n                // update the displayed property\n                this.tableColumns[previousIndex].Display = localStorageColumns[index].Display;\n                // rearange columns\n                this.moveItemInArray(this.tableColumns, previousIndex, index);\n            }\n        }\n    }\n\n    private saveColumnConfig(): void {\n        if (!this.tableConfiguration || !this.tableConfiguration.LocalStorageKey) {\n            return;\n        }\n\n        this.localStorageService.setAsJson(this.tableConfiguration.LocalStorageKey, this.tableColumns);\n    }\n\n    private moveItemInArray(array: any[], previousIndex: number, index: number): void {\n        const temp = array[previousIndex];\n        array[previousIndex] = array[index];\n        array[index] = temp;\n    }\n    //#endregion\n\n    //#region Paginator\n\n    private localizePaginator(): void {\n        if (!this.tableConfiguration.AllowPagination) {\n            return;\n        }\n\n        if (this.paginator === undefined) {\n            return;\n        }\n\n        this.paginator._intl.firstPageLabel = 'First Page';\n        this.paginator._intl.previousPageLabel = 'Previous Page';\n        this.paginator._intl.nextPageLabel = 'Next Page';\n        this.paginator._intl.lastPageLabel = 'Last Page';\n        this.paginator._intl.itemsPerPageLabel = 'Items per Page';\n\n        this.paginator._intl.getRangeLabel = (page: number, pageSize: number, length: number) => {\n            if (length === 0 || pageSize === 0) {\n                return `0 of ${length}`;\n            }\n\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n            return `${startIndex + 1} - ${endIndex} of ${length}`;\n        };\n    }\n\n    //#endregion\n\n    //#region ClassNames\n    getRowClassName(): string {\n        const hasImageColumn = this.tableColumns.find((c) => c.ColumnType === ColumnType.Image);\n\n        if (hasImageColumn) {\n            return 'row-with-image';\n        }\n\n        return '';\n    }\n\n    getColumnClassName(column: IColumnDefinition): string {\n        switch (column.ColumnType) {\n            case ColumnType.Actions:\n                return 'actions';\n            case ColumnType.Icon:\n                return 'icons';\n            case ColumnType.Image:\n                return 'images';\n        }\n        return '';\n    }\n    //#endregion\n\n    //#region Checks (Header, Cell, Column or Row)\n\n    isImmutableColumn = ColumnHelper.isImmutableColumn;\n    canColumnBeHidden = ColumnHelper.canColumnBeHidden;\n    canColumnBeMoved = ColumnHelper.canColumnBeMoved;\n    canColumnBeFiltered = ColumnHelper.canColumnBeFiltered;\n    isFilteringEnabledOnColumn = ColumnHelper.isFilteringEnabledOnColumn;\n    hasFiltersOrSortingEnabled = ColumnHelper.hasFiltersOrSortingEnabled;\n    isCellClickable = ColumnHelper.isCellClickable;\n\n    //#endregion\n}\n","import { NgModule } from '@angular/core';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\n@NgModule({\r\n    exports: [\r\n        CdkTableModule,\r\n        DragDropModule,\r\n        MatButtonModule,\r\n        MatButtonToggleModule,\r\n        MatCheckboxModule,\r\n        MatDialogModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatMenuModule,\r\n        MatPaginatorModule,\r\n        MatRippleModule,\r\n        MatSortModule,\r\n        MatTableModule,\r\n        MatTooltipModule,\r\n        ScrollingModule,\r\n    ],\r\n    providers: [],\r\n})\r\nexport class MaterialModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FilterColumnsComponent } from './components/filter-columns/filter-columns.component';\r\nimport { MaterialModule } from './modules/material.module';\r\nimport { AdvancedMaterialTableComponent } from './ngx-advanced-material-table.component';\r\nimport { FilterColumnValuesPipe } from './pipes/filter.pipe';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, MaterialModule],\r\n    declarations: [AdvancedMaterialTableComponent, FilterColumnsComponent, FilterColumnValuesPipe],\r\n    exports: [AdvancedMaterialTableComponent],\r\n    entryComponents: [FilterColumnsComponent],\r\n})\r\nexport class NgxAdvancedMaterialTableModule {}\r\n","/*\n * Public API Surface of ngx-advanced-material-table\n */\nimport '@angular/localize/init';\n\nexport * from './lib/components/filter-columns/filter-columns.component';\nexport * from './lib/ngx-advanced-material-table.component';\nexport * from './lib/ngx-advanced-material-table.module';\n\nexport * from './lib/interfaces/column-definition.interface';\nexport * from './lib/interfaces/key-filter-values.interface';\nexport * from './lib/interfaces/table-configuration.interface';\n\nexport * from './lib/interfaces/enums/dialog-action.enum';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIY;AAAZ,WAAY,UAAU;IAClB,+CAAM,CAAA;IACN,mDAAQ,CAAA;IACR,2CAAI,CAAA;IACJ,2CAAI,CAAA;IACJ,iDAAO,CAAA;IACP,mDAAQ,CAAA;IACR,2CAAI,CAAA;IACJ,yDAAW,CAAA;IACX,iEAAe,CAAA;IACf,6CAAK,CAAA;IACL,4CAAI,CAAA;AACR,CAAC,EAZW,UAAU,KAAV,UAAU;;MCJT,KAAK;IACd,OAAO,gBAAgB,CAAC,KAAe;QACnC,MAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI;YACf,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC/B,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvB;SACJ,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;KACnB;IAED,OAAO,sBAAsB,CAAC,IAAY,EAAE,SAAS,GAAG,GAAG;QACvD,IAAI,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;YAChC,OAAO,EAAE,CAAC;SACb;QACD,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACjC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,KAAK,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,CAAC;KACjE;IAED,OAAO,4BAA4B,CAAC,KAAa,EAAE,SAAiB,EAAE,KAAa;QAC/E,OAAO,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;KACvE;IAED,OAAO,QAAQ,CAAC,KAAU;QACtB,IAAI,KAAK,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE;YAC7E,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,mBAAmB,CAAC,KAAU,EAAE,OAAe;QAClD,IAAI,KAAK,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE;YACrE,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,UAAU,CAAC,KAAU;QACxB,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACtB,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;SACjC;KACJ;IAED,OAAO,OAAO,CAAC,KAAU;QACrB,IAAI,KAAK,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,KAAK,EAAE;YAC7D,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,QAAQ,CAAC,KAAU;QACtB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,gBAAgB,CAAC,KAAU;QAC9B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1C,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,iBAAiB,CAAC,KAAU;QAC/B,OAAO,CAAC,KAAK,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;KAC7C;IAED,OAAO,oBAAoB,CAAC,KAAU;QAClC,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,qBAAqB,CAAC,KAAa;QACtC,IAAI,KAAK,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAC1D,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,kBAAkB,CAAC,KAAa;QACnC,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;KAC9C;IAED,OAAO,gBAAgB,CAAC,MAAc,EAAE,WAAmB,EAAE,aAAa,GAAG,IAAI;QAC7E,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE;YACzB,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,aAAa,EAAE;YACf,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;gBACpC,OAAO,IAAI,CAAC;aACf;YACD,OAAO,KAAK,CAAC;SAChB;aAAM;YACH,IAAI,MAAM,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC5E,OAAO,IAAI,CAAC;aACf;YACD,OAAO,KAAK,CAAC;SAChB;KACJ;IAED,OAAO,eAAe,CAAC,UAAoB,EAAE,WAAmB,EAAE,aAAa,GAAG,IAAI;QAClF,IAAI,CAAC,UAAU,IAAI,CAAC,WAAW,EAAE;YAC7B,OAAO,KAAK,CAAC;SAChB;QAED,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE;YAC7B,IAAI,aAAa,EAAE;gBACf,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;oBACpC,OAAO,IAAI,CAAC;iBACf;aACJ;iBAAM;gBACH,IAAI,MAAM,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC5E,OAAO,IAAI,CAAC;iBACf;aACJ;SACJ;QACD,OAAO,KAAK,CAAC;KAChB;;;ICzHO;AAAZ,WAAY,gBAAgB;IACxB,6BAAS,CAAA;IACT,qCAAiB,CAAA;AACrB,CAAC,EAHW,gBAAgB,KAAhB,gBAAgB;;MCIf,sBAAsB;IAC/B,SAAS,CAAC,KAAyB,EAAE,UAAkB;QACnD,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,EAAE,CAAC;SACb;QACD,IAAI,CAAC,UAAU,EAAE;YACb,OAAO,KAAK,CAAC;SAChB;QACD,UAAU,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;QACtC,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE;YACnB,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;SAChE,CAAC,CAAC;KACN;;4FAZQ,sBAAsB;6FAAtB,sBAAsB;uFAAtB,sBAAsB;cADlC,IAAI;eAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE;;;;ICapB,4BAA+F;IAA/F,gBAA+F;IAAmB,iBAAO;;;;IAEzH,+BAGC;IACG,wCAA+F;IAAlC,mNAAiC;IAC1F,4BAAM;IAAC,YAAyB;IAAA,iBAAO;IAC3C,iBAAe;IACnB,iBAAM;;;IAHY,eAAoB;IAApB,qCAAoB,6BAAA;IACvB,eAAyB;IAAzB,sDAAyB;;MCJvC,sBAAsB;IAS/B,YACW,SAA+C,EAC9C,EAAe,EACS,OAA2B;QAFpD,cAAS,GAAT,SAAS,CAAsC;QAC9C,OAAE,GAAF,EAAE,CAAa;QACS,YAAO,GAAP,OAAO,CAAoB;QAV/D,uBAAkB,GAAW,EAAE,CAAC;QAGhC,yBAAoB,GAAuB,EAAE,CAAC;QAC9C,mBAAc,GAA2B,EAAE,MAAM,EAAE,gBAAgB,CAAC,MAAM,EAAE,CAAC;QAC7E,eAAU,GAAG,UAAU,CAAC;QAOpB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;QAClD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACxE,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC;QACjE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC5B,aAAa,EAAE,CAAC,EAAE,CAAC;SACtB,CAAC,CAAC;KACN;IAED,QAAQ;QACJ,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,2BAA2B,EAAE,CAAC,CAAC;KAC3G;IAED,2BAA2B;QACvB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;KAC1E;IAED,cAAc,CAAC,MAAyB;QACpC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;gBAChC,CAAC,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;aAC9B;SACJ,CAAC,CAAC;KACN;IAED,oBAAoB,CAAC,KAAqB;QACtC,IAAI,IAAI,CAAC,cAAc,CAAC,aAAa,KAAK,KAAK,EAAE;YAC7C,IAAI,CAAC,cAAc,CAAC,aAAa,GAAG,SAAS,CAAC;SACjD;aAAM;YACH,IAAI,CAAC,cAAc,CAAC,aAAa,GAAG,KAAK,CAAC;SAC7C;KACJ;IAED,oBAAoB;QAChB,IAAI,CAAC,cAAc,CAAC,YAAY,GAAG,EAAE,CAAC;QACtC,IAAI,CAAC,cAAc,CAAC,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;QAElH,MAAM,QAAQ,GAA2B;YACrC,MAAM,EAAE,gBAAgB,CAAC,EAAE;YAC3B,iBAAiB,EAAE,IAAI,CAAC,uBAAuB,KAAK,IAAI,CAAC,cAAc,CAAC,aAAa;YACrF,cAAc,EAAE,IAAI,CAAC,cAAc;SACtC,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;KAClC;IAEO,WAAW,CAAC,OAA2B;QAC3C,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,OAAO,EAAE,CAAC;SACb;QAED,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,IAAI,EAAE;YACjC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SACtD;aAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;YACxC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAM,CAAC,CAAC,IAAe,GAAI,CAAC,CAAC,IAAe,CAAC,CAAC;SACnE;aAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;YACxC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAM,CAAC,CAAC,IAAe,CAAC,aAAa,CAAC,CAAC,CAAC,IAAc,CAAC,CAAC,CAAC;SAC9E;QAED,OAAO,OAAO,CAAC;KAClB;;4FAzEQ,sBAAsB,oGAYnB,eAAe;yEAZlB,sBAAsB;;;;;iBDdsC,UAAA,uDAAW;;;;;;iBAKnB,UAAA,gDAAc;;;;;;iBAoBtB,UAAA,wCAAS;;;;;;iBAIR,UAAA,0CAAU;;;;;;iBAQvB,UAAA,6BAAM;;;;;;kBAGN,UAAA,6BAAM;;;;;;kBA7BwD,UAAA,8DAAmB;;QAhB9H,8BAA4B;QACxB,iCAA+E;QAC3E,gCAAU;QAAA,qBAAK;QAAA,iBAAW;QAC9B,iBAAS;QAET,6BAAqE;QAArE,eAAqE;QAAW,iBAAK;QAErF,0CAAoB;QAChB,+BAAyE;QACrE,sCAAgB;QACZ,iCAAiD;QAAjD,gBAAiD;QAAc,iBAAY;QAC3E,4BAAgF;QACpF,iBAAiB;QACrB,iBAAO;QAEP,uDAA0E;QACtE,2EAAyH;QAEzH,yEAOM;;QACV,iBAA8B;QAE9B,oDAAyF;QACrF,8CAAgH;QAA9C,uHAAU,sCAAkC,IAAC;QAC3G,6BAAyC;QAAzC,iBAAyC;QAAS,iBAAO;QACzD,iCAAU;QAAA,6BAAY;QAAA,iBAAW;QACrC,iBAAoB;QACpB,8CAAkH;QAA9C,uHAAU,sCAAkC,IAAC;QAC7G,6BAA0C;QAA1C,iBAA0C;QAAU,iBAAO;QAC3D,iCAAU;QAAA,+BAAc;QAAA,iBAAW;QACvC,iBAAoB;QACxB,iBAA0B;QAC9B,iBAAqB;QAErB,2CAAoB;QAChB,mCAAwF;QACpF,6BAAiC;QAAjC,iBAAiC;QAAM,iBAAO;QAClD,iBAAS;QACT,mCAAqG;QAAhD,oGAAS,0BAAsB,IAAC;QACjF,6BAAiC;QAAjC,iBAAiC;QAAM,iBAAO;QAClD,iBAAS;QACb,iBAAqB;QACzB,iBAAM;;QA/CyC,eAAmC;QAAnC,qDAAmC;QAO1B,eAAwB;QAAxB,0CAAwB;QAQ7D,eAAuC;QAAvC,4DAAuC;QAIhB,eAA8D;QAA9D,yGAA8D;QAQlD,eAA0C;QAA1C,mEAA0C;QAapC,gBAAmC;QAAnC,qDAAmC;;uFCtBlF,sBAAsB;cALlC,SAAS;eAAC;gBACP,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,iCAAiC,CAAC;aACjD;;sBAaQ,MAAM;uBAAC,eAAe;;;MC7BlB,YAAY;IACrB,OAAO,UAAU,CAAI,KAAa,EAAE,OAAU;QAC1C,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YAC3B,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;SACzB;;QAGD,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEpC,IAAI,WAAW,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACpD,WAAW,GAAG,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;SAChD;QAED,OAAO,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,EAAE,CAAC;KAC5B;IAED,OAAO,UAAU,CAAI,MAAyB,EAAE,OAAU;QACtD,IAAI,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC/C,OAAO,EAAE,CAAC;SACb;QAED,IAAI,GAAW,CAAC;QAChB,QAAQ,MAAM,CAAC,UAAU;YACrB,KAAK,UAAU,CAAC,IAAI,CAAC;YACrB,KAAK,UAAU,CAAC,QAAQ,CAAC;YACzB,KAAK,UAAU,CAAC,IAAI,CAAC;YACrB,KAAK,UAAU,CAAC,IAAI,CAAC;YACrB,KAAK,UAAU,CAAC,QAAQ,CAAC;YACzB,KAAK,UAAU,CAAC,MAAM,CAAC;YACvB,KAAK,UAAU,CAAC,IAAI,CAAC;YACrB,KAAK,UAAU,CAAC,KAAK;gBACjB,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC5B,MAAM;YAEV;gBACI,GAAG,GAAG,EAAE,CAAC;gBACT,MAAM;SACb;QACD,OAAO,GAAG,CAAC;KACd;IAED,OAAO,iBAAiB,CAAC,MAAyB;;QAE9C,OAAO,MAAM,CAAC,UAAU,KAAK,UAAU,CAAC,OAAO,IAAI,MAAM,CAAC,UAAU,KAAK,UAAU,CAAC,IAAI,CAAC;KAC5F;IAED,OAAO,iBAAiB,CAAC,MAAyB;QAC9C,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;KAC1C;IAED,OAAO,gBAAgB,CAAC,MAAyB;QAC7C,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;KAC1C;IAED,OAAO,mBAAmB,CAAC,MAAyB;QAChD,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;KAC1C;IAED,OAAO,0BAA0B,CAAC,MAAyB;QACvD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE;YACnC,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;YACf,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;KACf;IAED,OAAO,0BAA0B,CAAC,MAAyB;QACvD,IAAI,CAAC,MAAM,EAAE;YACT,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,MAAM,CAAC,aAAa,EAAE;YACtB,OAAO,IAAI,CAAC;SACf;QAED,IAAI,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YACvD,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,eAAe,CAAC,MAAyB;QAC5C,QAAQ,MAAM,CAAC,UAAU;YACrB,KAAK,UAAU,CAAC,OAAO,CAAC;YACxB,KAAK,UAAU,CAAC,IAAI,CAAC;YACrB,KAAK,UAAU,CAAC,QAAQ,CAAC;YACzB,KAAK,UAAU,CAAC,WAAW,CAAC;YAC5B,KAAK,UAAU,CAAC,eAAe;gBAC3B,OAAO,KAAK,CAAC;YACjB;gBACI,OAAO,IAAI,CAAC;SACnB;KACJ;;;MClGQ,kBAAkB;IAC3B,OAAO,UAAU,CAAI,SAAc,EAAE,OAAiB,EAAE,WAAqB;QACzE,IAAI,GAAG,GAAG,oBAAoB,CAAC;QAC/B,KAAK,MAAM,CAAC,IAAI,WAAW,EAAE;YACzB,GAAG,IAAI,MAAM,GAAG,CAAC,GAAG,OAAO,CAAC;SAC/B;QACD,GAAG,IAAI,sBAAsB,CAAC;QAC9B,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE;YAC1B,GAAG,IAAI,MAAM,CAAC;YACd,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;gBACrB,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,SAAS,EAAE;oBACnC,GAAG,IAAI,MAAM,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,OAAO,CAAC;iBACvE;aACJ;YACD,GAAG,IAAI,OAAO,CAAC;SAClB;QACD,GAAG,IAAI,kBAAkB,CAAC;QAC1B,OAAO,GAAG,CAAC;KACd;IAED,OAAO,uBAAuB,CAAC,KAAa,EAAE,iBAAyB,YAAY;QAC/E,QACI,cAAc;YACd,uCAAuC;YACvC,kDAAkD;YAClD,UAAU;YACV,qCAAqC;YACrC,uDAAuD;YACvD,0CAA0C;YAC1C,wDAAwD;YACxD,4CAA4C;YAC5C,uDAAuD;YACvD,4CAA4C;YAC5C,iDAAiD;YACjD,KAAK;YACL,cAAc;YACd,IAAI;YACJ,IAAI,IAAI,EAAE;YACV,OAAO;YACP,8BAA8B;YAC9B,KAAK;YACL,sBAAsB,EACxB;KACL;;;AC3CL;;;MAIa,mBAAmB;IAC5B,GAAG,CAAC,GAAW,EAAE,KAAa;QAC1B,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KACpC;IAED,GAAG,CAAC,GAAW;QACX,OAAO,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KACpC;IAED,MAAM,CAAC,GAAW;QACd,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;KAChC;IAED,SAAS,CAAC,eAAuB,EAAE,KAAU,EAAE,QAA8B;QACzE,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;KAC1E;IAED,SAAS,CAAC,eAAuB;QAC7B,IAAI,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QACxD,OAAO,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;KACvD;IAED,MAAM,CAAC,eAAuB;QAC1B,IAAI,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;YACvC,OAAO,IAAI,CAAC;SACf;aAAM;YACH,OAAO,KAAK,CAAC;SAChB;KACJ;;sFA5BQ,mBAAmB;yEAAnB,mBAAmB,WAAnB,mBAAmB,mBADN,MAAM;uFACnB,mBAAmB;cAD/B,UAAU;eAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;;ICFtB,6BAAqD;IACjD,sCAAgB;IACZ,iCAME;IAHE,4OAAwC;IAH5C,iBAME;IACN,iBAAiB;IACrB,0BAAe;;;IANH,eAAmD;IAAnD,wFAAmD;;;IAqC/C,oCAAgD;IAAA,yBAAS;IAAA,iBAAW;;;IACpE,gCAAkC;IAAA,uCAAuB;IAAA,iBAAW;;;;IANxE,+BAIC;IADG,uSAAoC,wBAAwB,IAAC;IAE7D,0HAAoE;IACpE,0HAAoE;IACpE,4BAAM;IAAA,YAAkB;IAAA,iBAAO;IACnC,iBAAM;;;IAHS,eAAoB;IAApB,yCAAoB;IACpB,eAAqB;IAArB,0CAAqB;IAC1B,eAAkB;IAAlB,sCAAkB;;;IARhC,+BAA6D;IACzD,0GAQM;IACV,iBAAM;;;IAVD,6FAAuD;IAGjC,eAAiB;IAAjB,8CAAiB;;;;IAzBxD,+BAAmE;IAC/D,kCAMC;IAFG,iNAA2B;IAG3B,gCAAU;IAAA,+BAAe;IAAA,iBAAW;IACxC,iBAAS;IAET,kCAKC;IACG,gCAAU;IAAA,2BAAW;IAAA,iBAAW;IACpC,iBAAS;IAET,0CAAwC;IACpC,4GAYc;IAClB,iBAAW;IAEX,mCAMC;IAFG,gNAAyB;IAGzB,iCAAU;IAAA,8BAAa;IAAA,iBAAW;IACtC,iBAAS;IAET,mCAMC;IAHG,gNAAyB;IAIzB,iCAAU;IAAA,sBAAK;IAAA,iBAAW;IAC9B,iBAAS;IAET,2CAAoE;IAApE,iBAAoE;IAAsB,iBAAW;IACrG,2CAA+D;IAA/D,iBAA+D;IAAe,iBAAW;IACzF,2CAA4E;IAA5E,iBAA4E;IAAyB,iBAAW;IAChH,2CAAmD;IAAnD,iBAAmD;IAAK,iBAAW;IACvE,iBAAM;;;;;;;;IAzDE,eAAsD;IAAtD,2FAAsD;IAGtD,2CAAgD;IAOhD,eAAkD;IAAlD,uFAAkD;IAClD,wCAAwC,8BAAA;IAwBxC,eAA6D;IAA7D,kGAA6D;IAC7D,2CAA0C,oCAAA;IAS1C,eAAmD;IAAnD,wFAAmD;IAEnD,2CAAsC,oCAAA;;;IAjElD,+BAAuG;IACnG,+BAA0B;IACtB,wGAUe;IACnB,iBAAM;IAEN,wFA4DM;IACV,iBAAM;;;IA1EiB,eAAoC;IAApC,4DAAoC;IAa3B,eAAqC;IAArC,6DAAqC;;;;IA+DrE,+BAAyE;IACrE,oCAIiB;IACrB,iBAAM;;;IAHE,eAAgD;IAAhD,qFAAgD;IADhD,6DAAqC;;;;IAoBjC,wCAKC;IAHG,yPAAoC,IAAI,IAAC;IAI7C,iBAAe;;;IAHX,iFAAmD,2EAAA;;;IAJ3D,uCAAmC;IAC/B,oHAMe;IACnB,iBAAkB;;;IANT,eAAuC;IAAvC,+DAAuC;;;;IAOhD,gCAAgC;IAC5B,wCAIC;IAHG,kIAAS,wBAAwB,IAAC,uRACK,IAAI,IADT;IAItC,iBAAe;IACnB,iBAAW;;;;IAHH,eAAqC;IAArC,8DAAqC;;;;IAgBzC,6BAAyD;IACrD,gCAA4E;IAAA,YAAkB;IAAA,iBAAO;IACrG,kCAOC;IAHG,iTAAkC;IAIlC,gCAAU;IAAA,2BAAW;IAAA,iBAAW;IACpC,iBAAS;IACb,0BAAe;;;;IAXW,eAAqD;IAArD,0EAAqD;IAAC,eAAkB;IAAlB,sCAAkB;IAO1F,eAAqD;IAArD,0EAAqD;IADrD,kDAA4B;;;;;IAhBxC,2CAQC;IALG,+SAAuC;IAMvC,mIAYe;IACnB,iBAAkB;;;;IAlBd,2EAAsC,0DAAA,mDAAA,gCAAA;IAKvB,eAAwC;IAAxC,qEAAwC;;;IAsB/C,4BAA0C;IAAC,YAAiC;IAAA,iBAAO;;;;;IAAxC,eAAiC;IAAjC,2EAAiC;;;IAE5E,4BAAsC;IAAC,YAAiC;IAAA,iBAAO;;;;;IAAxC,eAAiC;IAAjC,2EAAiC;;;IAExE,4BAAsC;IAAC,YAAiC;IAAA,iBAAO;;;;;IAAxC,eAAiC;IAAjC,2EAAiC;;;IAExE,4BAAwC;IAAC,YAAiC;IAAA,iBAAO;;;;;IAAxC,eAAiC;IAAjC,2EAAiC;;;;IAE1E,gCAAoF;IAA9C,gWAA6C;IAC/E,6BAA2E;IAAA,YAAiC;IAAA,iBAAI;IACpH,iBAAO;;;;;IADA,eAAwC;IAAxC,+FAAwC;IAAgC,eAAiC;IAAjC,iEAAiC;;;IAGhH,2BAAsC;IAClC,0BAA2D;IAC/D,iBAAM;;;;;IADG,eAAuC;IAAvC,8FAAuC;;;;IAoBhD,6BAA8C;IAC1C,kCAIC;IADG,iWAAoC;IAEpC,gCAAU;IAAC,YAAwB;IAAA,iBAAW;IAC9C,YACJ;IAAA,iBAAS;IACb,0BAAe;;;;;IAPP,eAAoD;IAApD,6EAAoD;IAIzC,eAAwB;IAAxB,sDAAwB;IACnC,eACJ;IADI,4EACJ;;;IAeI,gCAAqD;IACjD,YACJ;IAAA,iBAAO;;;;IADH,eACJ;IADI,qEACJ;;;;IAdR,6BAAqD;IACjD,0CAAmC;IAC/B,iCAQE;IAFE,yXAAqD;IANzD,iBAQE;IAEF,4HAEO;IACX,iBAAiB;IACrB,0BAAe;;;;;IAVH,eAAkD;IAAlD,gFAAkD,mEAAA,wCAAA;IAMtB,eAAmB;IAAnB,wCAAmB;;;IAO/D,gCAA2F;IACvF,YACJ;IAAA,iBAAO;;;;IADH,eACJ;IADI,qEACJ;;;;IAzER,oCAIC;IADG,6XAA2D,IAAI,IAAC;IAEhE,+BAAgD;IAC5C,iCAA6C;IAEzC,4GAAmF;IAEnF,4GAA+E;IAE/E,4GAA+E;IAE/E,4GAAiF;IAEjF,4GAEO;IAEP,0GAEM;IAmBN,4HASe;IAEf,8HAgBe;IACnB,0BAAe;IAEf,8GAEO;IACX,iBAAM;IACV,iBAAW;;;;;IAzEP,gEAAsC;IAGjC,eAA0C;IAA1C,wEAA0C;IAC7B,eAA8B;IAA9B,gDAA8B;IAEjC,eAAiC;IAAjC,0DAAiC;IAEjC,eAA6B;IAA7B,sDAA6B;IAE7B,eAA6B;IAA7B,sDAA6B;IAE7B,eAA+B;IAA/B,wDAA+B;IAE/B,eAA6B;IAA7B,sDAA6B;IAI9B,eAA8B;IAA9B,uDAA8B;IAqBrB,eAA6B;IAA7B,sDAA6B;IAW7B,eAAoC;IAApC,6DAAoC;IAmBjC,eAAmE;IAAnE,oGAAmE;;;IA/FrG,iCAAmG;IAC/F,uHAsBkB;IAClB,2GA2EW;IACf,0BAAe;;;IApGkD,0DAAiC;;;IAsGlG,iCAAqE;;;;IACrE,mCAKC;IADG,qRAA+B;IAClC,iBAAU;;;;IAHP,0CAAiB;IACjB,kDAA6B;;;IAKrC,+BAAgD;IAC5C,4BAAmC;IAAnC,gBAAmC;IAAyB,iBAAO;IACvE,iBAAM;;MCxMG,8BAA8B;IAuDvC,YAAoB,MAAiB,EAAU,mBAAwC,EAAU,KAAwB;QAArG,WAAM,GAAN,MAAM,CAAW;QAAU,wBAAmB,GAAnB,mBAAmB,CAAqB;QAAU,UAAK,GAAL,KAAK,CAAmB;QAvB/G,mBAAc,GAA8B,IAAI,YAAY,EAAE,CAAC;QAC/D,gBAAW,GAAyC,IAAI,YAAY,EAAE,CAAC;QACvE,gBAAW,GAAiC,IAAI,YAAY,EAAkB,CAAC;QAC/E,iBAAY,GAAiD,IAAI,YAAY,EAAE,CAAC;QAChF,qBAAgB,GAAG,IAAI,YAAY,EAAE,CAAC;QACtC,2BAAsB,GAAG,IAAI,YAAY,EAAE,CAAC;QAC5C,0BAAqB,GAAG,IAAI,YAAY,EAAE,CAAC;QAC3C,qBAAgB,GAAG,IAAI,YAAY,EAAE,CAAC;QAMhD,qBAAgB,GAAa,EAAE,CAAC;QAEhC,oBAAe,GAAY,KAAK,CAAC;QACjC,qBAAgB,GAAY,KAAK,CAAC;QAClC,eAAU,GAAG,UAAU,CAAC;QACxB,cAAS,GAAG,IAAI,cAAc,CAAI,IAAI,EAAE,EAAE,CAAC,CAAC;QAEpC,oBAAe,GAAwB,EAAE,CAAC;QAC1C,eAAU,GAAG,EAAE,CAAC;QA6BxB,eAAU,GAAG,CAAC,MAAyB,EAAE,OAAU,KAAK,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACvG,eAAU,GAAG,CAAC,GAAM,EAAE,MAAyB,KAAK,YAAY,CAAC,UAAU,CAAI,MAAM,EAAE,GAAG,CAAC,CAAC;;;QA4hB5F,sBAAiB,GAAG,YAAY,CAAC,iBAAiB,CAAC;QACnD,sBAAiB,GAAG,YAAY,CAAC,iBAAiB,CAAC;QACnD,qBAAgB,GAAG,YAAY,CAAC,gBAAgB,CAAC;QACjD,wBAAmB,GAAG,YAAY,CAAC,mBAAmB,CAAC;QACvD,+BAA0B,GAAG,YAAY,CAAC,0BAA0B,CAAC;QACrE,+BAA0B,GAAG,YAAY,CAAC,0BAA0B,CAAC;QACrE,oBAAe,GAAG,YAAY,CAAC,eAAe,CAAC;KA9jB8E;IAhD7H,IACI,YAAY,CAAC,KAA0B;QACvC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KAC7C;IACD,IAAI,YAAY;QACZ,OAAO,IAAI,CAAC,eAAe,CAAC;KAC/B;IAGD,IAAa,IAAI,CAAC,KAAU;QACxB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,eAAe,EAAE,CAAC;KAC1B;IACD,IAAI,IAAI;QACJ,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;IAED,IAAa,YAAY,CAAC,gBAAqB;QAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,cAAc,CAAM,IAAI,EAAE,gBAAgB,CAAC,CAAC;KACpE;IAED,IAAI,YAAY;QACZ,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;KAClC;IA2BD,QAAQ;QACJ,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC5B;IAED,eAAe;QACX,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,GAAS;YACrC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;gBACb,OAAO;aACV;YAED,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,MAAM;gBAChC,IAAI,MAAM,CAAC,KAAK,KAAK,GAAG,CAAC,MAAM,EAAE;oBAC7B,MAAM,CAAC,aAAa,GAAG,SAAS,CAAC;iBACpC;qBAAM;oBACH,MAAM,CAAC,aAAa,GAAG,GAAG,CAAC,SAAuC,CAAC;iBACtE;aACJ,CAAC,CAAC;SACN,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,EAAE,CAAC;KAC1B;IAKO,eAAe;QACnB,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,UAAU,GAAG,IAAI,kBAAkB,CAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,mBAAmB,GAAG,CAAC,IAAI,EAAE,QAAQ;YACjD,MAAM,OAAO,GAAG,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAExD,IAAI,CAAC,OAAO,EAAE;gBACV,OAAO,EAAE,CAAC;aACb;YAED,OAAO,OAAO,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;SAC3C,CAAC;QACF,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAEjC,IAAI,CAAC,UAAU,CAAC,eAAe,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC5D,IAAI,CAAC,YAAY,EAAE,CAAC;KACvB;IAEO,aAAa;QACjB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC;QACpH,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE;;YAErC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;SAC3C;KACJ;IAED,YAAY,CAAC,GAAM;QACf,IAAI,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE;YACxC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;SAClC;aAAM;YACH,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;SAChC;QAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC3D;IAED,aAAa,CAAC,GAAM;QAChB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACxC;IAED,YAAY;QACR,IAAI,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QAElH,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC3D;IAED,aAAa;QACT,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;QACnD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;QAC5C,OAAO,WAAW,KAAK,OAAO,CAAC;KAClC;IAED,kBAAkB;QACd,OAAO,CAAC,GAAM,EAAE,OAAe;YAC3B,MAAM,UAAU,GAAuB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3D,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE;gBAC7B,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC5B,SAAS;iBACZ;gBAED,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;gBACnC,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE,EAAE;oBACxB,OAAO,KAAK,CAAC;iBAChB;gBAED,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;gBACf,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,EAAE;oBACxE,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpD,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;iBACnE;qBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC7B,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;oBAC3B,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;iBAC/D;qBAAM;oBACH,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;iBAC/D;gBAED,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;oBACd,OAAO,KAAK,CAAC;iBAChB;aACJ;YAED,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/C,IAAI,KAAK,GAAG,KAAK,CAAC;gBAElB,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM;oBACtB,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;oBACrC,MAAM,WAAW,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;oBACxC,KAAK,GAAG,KAAK,IAAI,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;iBAChE,CAAC,CAAC;gBACH,OAAO,KAAK,CAAC;aAChB;YAED,OAAO,IAAI,CAAC;SACf,CAAC;KACL;IAED,cAAc,CAAC,KAAa,EAAE,KAAU;QACpC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;YAC5F,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,OAAO;SACV;QAED,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;QACrE,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,gBAAgB,EAAE,CAAC;KAC3B;IAED,eAAe;QACX,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,MAAyB;YACnD,MAAM,CAAC,aAAa,GAAG,SAAS,CAAC;YACjC,MAAM,CAAC,YAAY,GAAG,SAAS,CAAC;SACnC,CAAC,CAAC;;QAGH,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC;KACjC;;;;;IAMD,gBAAgB,CAAC,MAAmB;QAChC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACpC;IAED,yBAAyB,CAAC,OAAU,EAAE,MAAyB;QAC3D,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE;YACvC,OAAO;SACV;QAED,IAAI,MAAM,CAAC,kBAAkB,CAAC,mBAAmB,EAAE;YAC/C,OAAO,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,CAAC;SACjE;QAED,OAAO,MAAM,CAAC,kBAAkB,CAAC,cAAc,CAAC;KACnD;IAED,yBAAyB,CAAC,OAAU,EAAE,MAAyB;QAC3D,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE;YAC5B,OAAO;SACV;QAED,IAAI,MAAM,CAAC,kBAAkB,CAAC,mBAAmB,EAAE;YAC/C,OAAO,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,CAAC;SACjE;QAED,OAAO,MAAM,CAAC,kBAAkB,CAAC,cAAc,CAAC;KACnD;IAED,SAAS,CAAC,OAAU,EAAE,MAAyB;QAC3C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;KAC5C;IAED,iBAAiB,CAAC,OAAU,EAAE,MAAyB,EAAE,KAAU;QAC/D,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;KACjE;IAED,kBAAkB,CAAC,OAAU,EAAE,MAAyB;QACpD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;KACjD;IAED,wBAAwB,CAAC,OAAU,EAAE,MAAyB;QAC1D,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;KACvD;IAED,uBAAuB,CAAC,OAAU,EAAE,MAAyB;QACzD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;KACtD;IAED,kBAAkB,CAAC,OAAU,EAAE,MAAyB;QACpD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;KACjD;IAEO,oBAAoB,CAAC,GAAM;QAC/B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC9B;IAEO,kBAAkB,CAAC,GAAM;QAC7B,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAChC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;SAC1B;aAAM;YACH,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC9B;KACJ;IAEO,iBAAiB,CAAC,cAAiC;QACvD,IAAI,MAAM,GAAuB,EAAE,CAAC;QAEpC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG;YAClB,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;YAC7C,IAAI,cAAc,GAAG,KAAK,CAAC;YAE3B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACtB,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBAC3B,cAAc,GAAG,KAAK,CAAC;aAC1B;YAED,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,EAAE,EAAE;gBACvD,OAAO;aACV;YAED,MAAM,gBAAgB,GAAG,cAAc,CAAC,YAAY,GAAG,cAAc,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;YAE9H,MAAM,CAAC,IAAI,CAAC;gBACR,IAAI,EAAE,KAAK;gBACX,aAAa,EAAE,cAAc;gBAC7B,OAAO,EAAE,gBAAgB;aAC5B,CAAC,CAAC;SACN,CAAC,CAAC;QAEH,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAmB,KAAK,CAAC,CAAC,aAAa,CAAC,CAAC;QAEpE,OAAO,MAAM,CAAC;KACjB;;IAGD,iBAAiB,CAAC,KAAa;;KAE9B;IAED,qBAAqB,CAAC,KAAqC;QACvD,IAAI,CAAC,KAAK,EAAE;YACR,OAAO;SACV;QACD,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC;QAC5E,MAAM,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,gBAAgB,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;QAClH,MAAM,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,gBAAgB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;QAChH,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC,EAAE;YAC9D,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;YACjF,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAC3B;KACJ;;;IAKD,eAAe,CAAC,KAAU;QACtB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QACnD,IAAI,CAAC,YAAY,EAAE,CAAC;KACvB;IAEO,YAAY;QAChB,MAAM,OAAO,GAAuB,EAAE,CAAC;QAEvC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,MAAM;YAChC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;gBACtB,MAAM,CAAC,YAAY,GAAG,EAAE,CAAC;aAC5B;YAED,OAAO,CAAC,IAAI,CAAC;gBACT,GAAG,EAAE,MAAM,CAAC,KAAK;gBACjB,IAAI,EAAE,MAAM,CAAC,UAAU;gBACvB,MAAM,EAAE,MAAM,CAAC,YAAY;aAC9B,CAAC,CAAC;SACN,CAAC,CAAC;QAEH,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SACpD;KACJ;IAEO,UAAU,CAAC,EAAU,EAAE,KAAsB;QACjD,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;QAC7C,IAAI,EAAE,KAAK,aAAa,IAAI,KAAK,KAAK,gBAAgB,EAAE;YACpD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAS,CAAC,CAAC;YAC9D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAS,CAAC,CAAC;SAC7D;KACJ;IAEO,SAAS;;QAEb,IAAI,QAAQ,GAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;QACnE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC5B;IAEO,WAAW;QACf,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,aAAa,CAAC,CAAC;QACzE,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;YACX,OAAO;SACV;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;QAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC;QAEtD,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,IAAI,SAAS,EAAE;YACX,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;SAC1C;;QAGD,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAkB,CAAC;QAC9E,IAAI,gBAAgB,EAAE;YAClB,MAAM,SAAS,GAA6B,gBAAgB,CAAC,SAAS,EAAE;kBAClE,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE;kBAC3C,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;YAClD,gBAAgB,CAAC,4BAA4B,CAAC,SAAS,CAAC,CAAC;SAC5D;QAED,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;KAC9B;;;IAMD,gBAAgB,CAAC,cAAiC;QAC9C,MAAM,IAAI,GAAuB;YAC7B,cAAc,EAAE,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC;YAC3C,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC;SACvD,CAAC;QAEF,MAAM,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE;YACnE,YAAY,EAAE,KAAK;YACnB,SAAS,EAAE,KAAK;YAChB,KAAK,EAAE,OAAO;YACd,UAAU,EAAE,eAAe;YAC3B,IAAI;SACP,CAAC,CAAC;QAEH,qBAAqB;aAChB,WAAW,EAAE;aACb,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACb,SAAS,CAAC,CAAC,QAAgC;YACxC,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,IAAI,EAAE;gBACtC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBAC9B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aAC9B;SACJ,CAAC,CAAC;KACV;;;IAMO,cAAc,CAAC,QAAgC;QACnD,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;YACvC,OAAO;SACV;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,cAAe,CAAC,KAAK,CAAC,CAAC;QAE5F,IAAI,MAAM,EAAE;YACR,MAAM,CAAC,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC;SAC9D;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;KACvB;IAEO,WAAW,CAAC,QAAgC;QAChD,IAAI,QAAQ,CAAC,iBAAiB,KAAK,KAAK,EAAE;YACtC,OAAO;SACV;QAED,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAe,CAAC,KAAK,CAAC;QAClD,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAe,CAAC,aAAa,CAAC;QAEzD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,MAAM;YAChC,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,KAAK,KAAK,UAAU,GAAG,SAAS,GAAG,SAAS,CAAC;SAC9E,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,EAAE,CAAC;KACtB;;;IAMD,aAAa;QACT,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAEhD,MAAM,KAAK,GAAG,kBAAkB,CAAC,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAE3F,IAAI,KAAK,EAAE;YACP,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,MAAM;gBAAE,OAAO;YACpB,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC;YACzE,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,EAAE,CAAC;SAClB;KACJ;;IAGD,aAAa;;;;;;;;;;;;;;;;;;;KAmBZ;IAEO,oBAAoB;QACxB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE;YAC3B,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;SAClC;QACD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;YACvB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;SAClC;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KACvF;IAEO,uCAAuC;QAC3C,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAEjD,OAAO,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,GAAM;YAC9B,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC7C,CAAC,CAAC;KACN;IAEO,uBAAuB;QAC3B,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC;KACtG;;;IAKO,eAAe;QACnB,IAAI,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE;YACtE,OAAO;SACV;QAED,MAAM,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAwB,CAAC;QAE/H,IAAI,CAAC,mBAAmB,EAAE;YACtB,OAAO;SACV;QAED,MAAM,eAAe,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvD,KAAK,MAAM,GAAG,IAAI,eAAe,EAAE;YAC/B,MAAM,KAAK,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;YAC1E,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBACd,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;;gBAGhF,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,OAAO,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;;gBAE9E,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;aACjE;SACJ;KACJ;IAEO,gBAAgB;QACpB,IAAI,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE;YACtE,OAAO;SACV;QAED,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;KAClG;IAEO,eAAe,CAAC,KAAY,EAAE,aAAqB,EAAE,KAAa;QACtE,MAAM,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;QAClC,KAAK,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;QACpC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;KACvB;;;IAKO,iBAAiB;QACrB,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE;YAC1C,OAAO;SACV;QAED,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;YAC9B,OAAO;SACV;QAED,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,GAAG,YAAY,CAAC;QACnD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,iBAAiB,GAAG,eAAe,CAAC;QACzD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,aAAa,GAAG,WAAW,CAAC;QACjD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,aAAa,GAAG,WAAW,CAAC;QACjD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAE1D,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,IAAY,EAAE,QAAgB,EAAE,MAAc;YAChF,IAAI,MAAM,KAAK,CAAC,IAAI,QAAQ,KAAK,CAAC,EAAE;gBAChC,OAAO,QAAQ,MAAM,EAAE,CAAC;aAC3B;YAED,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC7B,MAAM,UAAU,GAAG,IAAI,GAAG,QAAQ,CAAC;;YAEnC,MAAM,QAAQ,GAAG,UAAU,GAAG,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,QAAQ,EAAE,MAAM,CAAC,GAAG,UAAU,GAAG,QAAQ,CAAC;YACvG,OAAO,GAAG,UAAU,GAAG,CAAC,MAAM,QAAQ,OAAO,MAAM,EAAE,CAAC;SACzD,CAAC;KACL;;;IAKD,eAAe;QACX,MAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC;QAExF,IAAI,cAAc,EAAE;YAChB,OAAO,gBAAgB,CAAC;SAC3B;QAED,OAAO,EAAE,CAAC;KACb;IAED,kBAAkB,CAAC,MAAyB;QACxC,QAAQ,MAAM,CAAC,UAAU;YACrB,KAAK,UAAU,CAAC,OAAO;gBACnB,OAAO,SAAS,CAAC;YACrB,KAAK,UAAU,CAAC,IAAI;gBAChB,OAAO,OAAO,CAAC;YACnB,KAAK,UAAU,CAAC,KAAK;gBACjB,OAAO,QAAQ,CAAC;SACvB;QACD,OAAO,EAAE,CAAC;KACb;;4GA1mBQ,8BAA8B;iFAA9B,8BAA8B;uBAyC5B,YAAY;uBACZ,OAAO;;;;;;;;;;iBDhEe,UAAA,uDAAoB;;;;;;iBA8DuB,UAAA,0DAAsB;;;;;;iBAC3B,UAAA,6CAAe;;;;;;iBACF,UAAA,8DAAyB;;;;;;iBAClD,UAAA,2BAAK;;;;;;kBA4JzB,UAAA,kDAAyB;;QAvOpE,2BAAK;QACD,+EA4EM;QAEN,+EAMM;QAEN,oCAUC;QADG,8IAAsB,iCAA6B,IAAC;QAGpD,gCAAoC;QAChC,uGAQkB;QAClB,yFAOW;QACf,0BAAe;QAEf,iGAoGe;QAEf,qGAAqE;QACrE,uFAKW;QACf,iBAAY;QAEZ,iFAEM;QACV,iBAAM;;QAxO4B,eAAuE;QAAvE,gGAAuE;QA8EtE,eAAwC;QAAxC,6DAAwC;QASnE,eAAsC;QAAtC,wEAAsC;QACtC,2CAAyB;QA8BQ,eAAiB;QAAjB,0CAAiB;QAsGjC,eAAiC;QAAjC,sDAAiC;QAEzB,eAAyB;QAAzB,uDAAyB;QAOhD,eAAqB;QAArB,0CAAqB;;uFCtMlB,8BAA8B;cAL1C,SAAS;eAAC;gBACP,QAAQ,EAAE,6BAA6B;gBACvC,WAAW,EAAE,8CAA8C;gBAC3D,SAAS,EAAE,CAAC,8CAA8C,CAAC;aAC9D;2HAGG,kBAAkB;kBADjB,KAAK;YAIN,mBAAmB;kBADlB,KAAK;YAIF,YAAY;kBADf,KAAK;YASO,IAAI;kBAAhB,KAAK;YAQO,YAAY;kBAAxB,KAAK;YAQI,cAAc;kBAAvB,MAAM;YACG,WAAW;kBAApB,MAAM;YACG,WAAW;kBAApB,MAAM;YACG,YAAY;kBAArB,MAAM;YACG,gBAAgB;kBAAzB,MAAM;YACG,sBAAsB;kBAA/B,MAAM;YACG,qBAAqB;kBAA9B,MAAM;YACG,gBAAgB;kBAAzB,MAAM;YAEkB,SAAS;kBAAjC,SAAS;mBAAC,YAAY;YACH,IAAI;kBAAvB,SAAS;mBAAC,OAAO;;;MCrCT,cAAc;;4EAAd,cAAc;gEAAd,cAAc;qEAFZ,EAAE,YAhBT,cAAc;QACd,cAAc;QACd,eAAe;QACf,qBAAqB;QACrB,iBAAiB;QACjB,eAAe;QACf,aAAa;QACb,cAAc;QACd,aAAa;QACb,kBAAkB;QAClB,eAAe;QACf,aAAa;QACb,cAAc;QACd,gBAAgB;QAChB,eAAe;uFAIV,cAAc;cApB1B,QAAQ;eAAC;gBACN,OAAO,EAAE;oBACL,cAAc;oBACd,cAAc;oBACd,eAAe;oBACf,qBAAqB;oBACrB,iBAAiB;oBACjB,eAAe;oBACf,aAAa;oBACb,cAAc;oBACd,aAAa;oBACb,kBAAkB;oBAClB,eAAe;oBACf,aAAa;oBACb,cAAc;oBACd,gBAAgB;oBAChB,eAAe;iBAClB;gBACD,SAAS,EAAE,EAAE;aAChB;;wFACY,cAAc,cAlBnB,cAAc;QACd,cAAc;QACd,eAAe;QACf,qBAAqB;QACrB,iBAAiB;QACjB,eAAe;QACf,aAAa;QACb,cAAc;QACd,aAAa;QACb,kBAAkB;QAClB,eAAe;QACf,aAAa;QACb,cAAc;QACd,gBAAgB;QAChB,eAAe;;MCnBV,8BAA8B;;4GAA9B,8BAA8B;gFAA9B,8BAA8B;oFAL9B,CAAC,YAAY,EAAE,WAAW,EAAE,mBAAmB,EAAE,cAAc,CAAC;uFAKhE,8BAA8B;cAN1C,QAAQ;eAAC;gBACN,OAAO,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,mBAAmB,EAAE,cAAc,CAAC;gBACzE,YAAY,EAAE,CAAC,8BAA8B,EAAE,sBAAsB,EAAE,sBAAsB,CAAC;gBAC9F,OAAO,EAAE,CAAC,8BAA8B,CAAC;gBACzC,eAAe,EAAE,CAAC,sBAAsB,CAAC;aAC5C;;wFACY,8BAA8B,mBAJxB,8BAA8B,EAAE,sBAAsB,EAAE,sBAAsB,aADnF,YAAY,EAAE,WAAW,EAAE,mBAAmB,EAAE,cAAc,aAE9D,8BAA8B;;ACX5C;;;;ACAA;;;;;;"}